{"version":3,"sources":["FileUpload.js","AppStart.js","utils/BibtexAPI.js","icons/Error.js","icons/Exito.js","Tab.js","Tabs.js","CapitalizationCheck.js","MandatoryFieldsCheck.js","AuthorNameCheck.js","AnalzyeErrors.js","utils/getNotRequiredFields.js","App.js","index.js"],"names":["readFileAsText","file","Promise","resolve","reader","FileReader","onload","event","target","result","readAsText","FileUpload","props","className","htmlFor","id","type","onChange","files","then","text","setBibtex","AppStart","onChangeText","setState","textInput","state","isBibtex","placeholder","value","this","bibtexText","Component","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","get","fetch","res","json","update","body","method","JSON","stringify","create","searchAuthor","title","author","searchMissingField","SvgError","viewBox","cx","cy","r","fill","stroke","strokeWidth","strokeLinecap","strokeMiterlimit","d","SvgExito","strokeLinejoin","Tab","onClick","label","activeTab","status","width","height","Error","Tabs","onClickTab","tab","children","map","child","key","CapitalizationCheck","correctedElements","allSelected","handleSaveSelection","console","log","options","selectAll","newAllSelectedState","changeAllOptions","handleChangeOption","optionToChange","optionsCheckboxes","find","option","checked","changeOption","changeSelected","capitalizationType","some","changeSelectedCapitalization","getCaseSum","caseSum","titleCaseSum","sentenceCaseSum","noCaseSum","entries","forEach","entry","capitalization","length","disabled","name","TITLE","correctionTitleCase","correctionSentenceCase","MandatoryFieldsCheck","changeAllMandatoryFieldCheck","getMissingFieldEntriesSum","filter","missingRequiredFields","searchMandatoryFieldSuggestion","mandatoryFieldsCheck","removeNotMandatoryFields","addMissingFields","Object","keys","mandatoryFieldsSuggestions","toggleMandatorFieldCheck","toUpperCase","index","authorArray","field","AUTHOR","checkedSearched","AuthorNameCheck","getInconsistentAuthorEntries","abbreviated","misspelling","changedAbbreviation","changedMisspelling","getInconsistentAuthorEntriesCount","searchSuggestions","changeAuthorSuggestion","authorNameOptions","changeAllAuthorNameOptions","checkCorrectedAuthors","entryId","entryAuthor","changeAuthorName","changeAuthorNameOption","suggestion","onlineSuggestion","AnalyzeErrors","downloadBibtex","bibtexContent","bibtex","element","document","createElement","Blob","href","URL","createObjectURL","download","appendChild","click","every","capitalizationOptions","getEntriesFromServer","searchSuggestionFile","changeMandatoryFieldCheck","getNotRequiredFields","entryType","entryKeys","requiredFields","includes","App","setInitialAuthorNameOptions","flatMap","sort","author1","author2","BibtexAPI","stateServer","loadDataFromServer","getSelectedEntries","prevState","changedEntry","assign","initialCapitalization","correctionInitialCase","allSelectedAuthorNameOptions","newOption","changeOptionsCheckboxes","concat","setInvalidFileInfo","onSetBibtexText","catch","suggestionArray","changedNames","newEntry","newEntryAuthor","newAuthor","foundCount","searchAuthorSuggestion","foundAuthorSuggestion","changedAuthors","changedAuthor","unshift","replace","message","items","foundAuthor","itemAuthor","startsWith","family","given","searchFieldSuggestion","changedEntries","foundFields","toLowerCase","missingField","missingFieldUpperCase","created","YEAR","authors","addedFieldSum","suggestedFieldsKeys","changedMissingRequiredFields","deletedFieldsSum","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.2819aaaa.chunk.js","sourcesContent":["import React from \"react\";\n\nconst readFileAsText = file =>\n  new Promise(resolve => {\n    const reader = new FileReader();\n    reader.onload = event => {\n      resolve(event.target.result);\n    };\n    reader.readAsText(file);\n  });\n\nfunction FileUpload(props) {\n  const handleFileChange = event => {\n    const file = event.target.files[0];\n    if (file) {\n      readFileAsText(file).then(text => {\n          props.setBibtex(text);\n      });\n    }\n  };\n\n  return (\n    <div className=\"start-upload-button\">\n      <label htmlFor=\"file\">\n        <br />\n        <br />\n        <br />\n        Upload BibTeX\n      </label>\n      <input\n        id=\"file\"\n        className=\"input-file\"\n        type=\"file\"\n        onChange={handleFileChange}\n      />\n    </div>\n  );\n}\nexport default FileUpload;\n","import React, { Component } from \"react\";\nimport FileUpload from \"./FileUpload\";\n\nclass AppStart extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isBibtex: false,\n      textInput: \"\"\n    };\n  }\n\n  onChangeText = text => {\n    this.setState({ textInput: text }, () => this.props.setBibtex(this.state.textInput));\n  };\n\n  render() {\n    return (\n      <div className=\"start-wrapper\">\n        <div className=\"start\">\n          <div className=\"start-inputs\">\n            <textarea\n              className=\"start-input-field\"\n              type=\"text\"\n              placeholder=\"Paste your BibTeX file here\"\n              value={this.state.bibtexText}\n              onChange={event => this.onChangeText(event.target.value)}\n            />\n            <FileUpload setBibtex={this.props.setBibtex} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\nexport default AppStart;\n","// const api = \"http://127.0.0.1:5000\";\nconst crossrefApi = 'https://api.crossref.org';\n\nlet token = localStorage.token;\n\nif (!token) {\n  token = localStorage.token = Math.random().toString(36).substr(-8)\n}\nconst headers = {\n  Accept: \"application/json\",\n  Authorization: token\n};\n\nexport const get = () =>\n  fetch(`/bibtex`, { headers })\n    .then(res => res.json());\n\nexport const update = body =>\n  fetch(`/update`, {\n  method: \"POST\",\n  headers: {\n    ...headers,\n    \"Content-Type\": \"application/json\"\n  },\n  body: JSON.stringify(body)\n}).then(res => res);\n\nexport const create = body =>\n  fetch(`/bibtex`, {\n    method: \"POST\",\n    headers: {\n      ...headers,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(body)\n  }).then(res => res.json());\n\nexport const getChangedBibtex = () =>\n  fetch(`/changedBibtex`, {headers})\n    .then(res => res.json());\n\nexport const searchAuthor = (title, author) =>\n  fetch(`${crossrefApi}/works?query.bibliographic=${title}&query.author=${author}&rows=1`)\n    .then(res => res.json());\n\nexport const searchMissingField = title =>\n  fetch(`${crossrefApi}/works?query.bibliographic=${title}&rows=1`)\n      .then(res => res.json());\n","import React from \"react\";\n\nfunction SvgError(props) {\n  return (\n    <svg viewBox=\"0 0 50 50\" {...props}>\n      <circle cx={25} cy={25} r={25} fill=\"#d75a4a\" />\n      <path\n        fill=\"none\"\n        stroke=\"#fff\"\n        strokeWidth={2}\n        strokeLinecap=\"round\"\n        strokeMiterlimit={10}\n        d=\"M16 34l9-9 9-9M16 16l9 9 9 9\"\n      />\n    </svg>\n  );\n}\n\nexport default SvgError;\n","import React from \"react\";\n\nfunction SvgExito(props) {\n  return (\n    <svg viewBox=\"0 0 50 50\" {...props}>\n      <circle cx={25} cy={25} r={25} fill=\"#25ae88\" />\n      <path\n        fill=\"none\"\n        stroke=\"#fff\"\n        strokeWidth={2}\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        strokeMiterlimit={10}\n        d=\"M38 15L22 33l-10-8\"\n      />\n    </svg>\n  );\n}\n\nexport default SvgExito;\n","import React, { Component } from \"react\";\nimport ErrorIcon from '../src/icons/Error';\nimport OKIcon from '../src/icons/Exito';\n\n// import PropTypes from 'prop-types';\n\nclass Tab extends Component {\n  onClick = () => {\n    const { label, onClick } = this.props;\n    onClick(label);\n  };\n\n  render() {\n    const {\n      onClick,\n      props: { activeTab, label, status }\n    } = this;\n\n    let className = \"tab-list-item\";\n\n    if (activeTab === label) {\n      className += \" tab-list-active\";\n    }\n\n    return (\n      <li className={className} onClick={onClick}>\n        {`${label} `}\n        {status\n        ? <OKIcon width=\"20px\" height=\"20px\" />\n        : <ErrorIcon width=\"20px\" height=\"20px\" />\n        }\n      </li>\n    );\n  }\n}\n\nexport default Tab;\n","import React, { Component } from \"react\";\nimport Tab from \"./Tab\";\n\nclass Tabs extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      activeTab: this.props.children[0].props.label,\n    };\n  }\n\n  onClickTab = tab => this.setState({ activeTab: tab });\n\n  render() {\n    const {\n      onClickTab,\n      props: { children },\n      state: { activeTab }\n    } = this;\n\n    return (\n      <div className=\"tabs\">\n        <ul className=\"tab-list\">\n          {children.map(child => {\n            const { label, status } = child.props;\n            return (\n              <Tab\n                activeTab={activeTab}\n                key={label}\n                label={label}\n                onClick={onClickTab}\n                status={status}\n              />\n            );\n          })}\n        </ul>\n        <div className=\"tab-content\">\n          {children.map(child => {\n            if (child.props.label !== activeTab) {\n              return undefined;\n            }\n            return child.props.children;\n          })}\n        </div>\n      </div>\n    );\n  }\n}\nexport default Tabs;\n","import React, { Component } from \"react\";\n\nclass CapitalizationCheck extends Component {\n  state = {\n    correctedElements: [],\n    allSelected: false\n  };\n\n  handleSaveSelection = () => {\n    console.log(this.props.options);\n  };\n\n  selectAll = () => {\n    const newAllSelectedState = !this.state.allSelected;\n    this.setState({\n      allSelected: newAllSelectedState\n    });\n    this.props.changeAllOptions(newAllSelectedState);\n  };\n\n  handleChangeOption = id => {\n    const optionToChange = this.props.optionsCheckboxes.find(\n      option => option.id === id\n    );\n    optionToChange.checked = !optionToChange.checked;\n\n    this.props.changeOption(optionToChange);\n  };\n\n  changeSelected = capitalizationType => {\n    if (\n      this.props.optionsCheckboxes.some(option => option.checked) ||\n      this.state.allSelected\n    ) {\n      this.props.changeSelectedCapitalization(capitalizationType);\n      this.setState({\n        allSelected: false\n      });\n    }\n  };\n\n  getCaseSum = () => {\n    const caseSum = {\n      titleCaseSum: 0,\n      sentenceCaseSum: 0,\n      noCaseSum: 0\n    };\n    this.props.entries.forEach(entry => {\n      if (entry.capitalization === \"titleCase\") caseSum.titleCaseSum++;\n      else if (entry.capitalization === \"sentenceCase\")\n        caseSum.sentenceCaseSum++;\n      else caseSum.noCaseSum++;\n    });\n    return caseSum;\n  };\n\n  render() {\n    const { entries, optionsCheckboxes } = this.props;\n\n    return (\n      <div>\n        <div className=\"statistic\">\n          <h3>Summary</h3>\n          <ul>\n            <li>{entries.length} Entries found</li>\n            {this.getCaseSum().titleCaseSum > 0 && (\n              <li>{this.getCaseSum().titleCaseSum} Title case entries found</li>\n            )}\n            {this.getCaseSum().sentenceCaseSum > 0 && (\n              <li>\n                {this.getCaseSum().sentenceCaseSum} Sentence case entries found\n              </li>\n            )}\n            {this.getCaseSum().noCaseSum > 0 && (\n              <li>{this.getCaseSum().noCaseSum} without known case found</li>\n            )}\n          </ul>\n        </div>\n\n        {entries.length > 0 && (\n          <div className=\"corrections-table\">\n            <button\n              className=\"btn-select-all\"\n              disabled={!optionsCheckboxes.some(option => option.checked)}\n              onClick={() => this.changeSelected(\"titleCase\")}\n            >\n              Set selected to title case\n            </button>\n            <button\n              className=\"btn-select-all\"\n              disabled={!optionsCheckboxes.some(option => option.checked)}\n              onClick={() => this.changeSelected(\"sentenceCase\")}\n            >\n              Set selected to sentence case\n            </button>\n            <button\n              className=\"btn-select-all\"\n              disabled={!optionsCheckboxes.some(option => option.checked)}\n              onClick={() => this.changeSelected(\"initialCase\")}\n            >\n              Set selected to initial case\n            </button>\n            <table>\n              <tbody>\n                <tr>\n                  <th>\n                    <input\n                      type=\"checkBox\"\n                      name=\"select-all-checkbox\"\n                      checked={this.state.allSelected}\n                      onChange={() => this.selectAll()}\n                    />\n                  </th>\n                  <th>Current</th>\n                  <th>Title case</th>\n                  <th>Sentence case</th>\n                </tr>\n              </tbody>\n              {entries.map(entry => (\n                <tbody key={entry.id}>\n                  <tr>\n                    <td\n                      className={\n                        entry.capitalization === \"titleCase\"\n                          ? \"table-entry-green\"\n                          : entry.capitalization === \"sentenceCase\"\n                          ? \"table-entry-blue\"\n                          : \"table-entry-red\"\n                      }\n                    >\n                      <center>\n                        <input\n                          id={entry.id}\n                          type=\"checkBox\"\n                          checked={\n                            optionsCheckboxes.find(\n                              option => option.id === entry.id\n                            ).checked\n                          }\n                          onChange={() => this.handleChangeOption(entry.id)}\n                        />\n                      </center>\n                    </td>\n                    <td\n                      className={\n                        entry.capitalization === \"titleCase\"\n                          ? \"table-entry-green\"\n                          : entry.capitalization === \"sentenceCase\"\n                          ? \"table-entry-blue\"\n                          : \"table-entry-red\"\n                      }\n                    >\n                      {entry.TITLE}\n                    </td>\n                    <td className=\"table-entry-green\">\n                      {entry.correctionTitleCase}\n                    </td>\n                    <td className=\"table-entry-blue\">\n                      {entry.correctionSentenceCase}\n                    </td>\n                  </tr>\n                </tbody>\n              ))}\n            </table>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\nexport default CapitalizationCheck;\n","import React, { Component } from \"react\";\n\nclass MandatoryFieldsCheck extends Component {\n  state = {\n    allSelected: false\n  };\n\n  selectAll = () => {\n    const newAllSelectedState = !this.state.allSelected;\n    this.setState({ allSelected: newAllSelectedState });\n    this.props.changeAllMandatoryFieldCheck(newAllSelectedState);\n  };\n\n  getMissingFieldEntriesSum = () =>\n    this.props.entries.filter(entry => entry.missingRequiredFields.length > 0)\n      .length;\n\n  render() {\n    return (\n      <div>\n        <div className=\"statistic\">\n          <h3>Summary</h3>\n          <ul>\n            <li>{this.props.entries.length} entries found</li>\n            {this.getMissingFieldEntriesSum() > 0 && (\n              <li>\n                {`${this.getMissingFieldEntriesSum()} entries with missing required fields found`}\n              </li>\n            )}\n          </ul>\n        </div>\n        {this.props.entries.length > 0 && (\n          <div className=\"corrections-table\">\n            <button\n              onClick={() => this.props.searchMandatoryFieldSuggestion()}\n              disabled={\n                !this.props.entries.some(entry => entry.mandatoryFieldsCheck)\n              }\n            >\n              Search missing fields online\n            </button>\n            <button\n              onClick={() => {\n                this.setState({ allSelected: false });\n                this.props.removeNotMandatoryFields();\n              }}\n              disabled={\n                !this.props.entries.some(entry => entry.mandatoryFieldsCheck)\n              }\n            >\n              Remove not mandatory fields\n            </button>\n            <button\n              disabled={\n                !this.props.entries.some(entry => entry.mandatoryFieldsCheck)\n              }\n              onClick={() => {\n                this.setState({ allSelected: false });\n                this.props.addMissingFields();\n              }}\n            >\n              Add field suggestion to entry\n            </button>\n            <table>\n              <tbody>\n                <tr>\n                  <th>\n                    <input\n                      type=\"checkBox\"\n                      name=\"select-all-missing-fields-checkbox\"\n                      checked={this.state.allSelected}\n                      onChange={() => this.selectAll()}\n                    />\n                  </th>\n                  <th>Current entry</th>\n                  <th>Suggestion for missing fields</th>\n                </tr>\n              </tbody>\n              {this.props.entries.map(entry => (\n                <tbody key={entry.id}>\n                  <tr\n                    className={\n                      entry.missingRequiredFields.length === 0\n                        ? \"table-entry-green\"\n                        : Object.keys(entry.mandatoryFieldsSuggestions).length >\n                          0\n                        ? \"table-entry-blue\"\n                        : \"table-entry-red\"\n                    }\n                  >\n                    <td>\n                      <input\n                        type=\"checkBox\"\n                        checked={entry.mandatoryFieldsCheck}\n                        onChange={() =>\n                          this.props.toggleMandatorFieldCheck(entry.id)\n                        }\n                      />\n                    </td>\n                    <td>\n                      {Object.keys(entry)\n                        .filter(key => key === key.toUpperCase())\n                        .map(key => (\n                          <div key={`${entry.id}+${key}`}>\n                            <strong>{key}: </strong>\n                            {entry[key] == null ? (\n                              \"<EMPTY>\"\n                            ) : key === \"AUTHOR\" ? (\n                              entry[key].map((author, index, authorArray) =>\n                                index === authorArray.length - 1 ? (\n                                  <span key={entry.id + author.name}>\n                                    {author.name}\n                                  </span>\n                                ) : (\n                                  <span key={entry.id + author.name}>\n                                    {author.name} and{\" \"}\n                                  </span>\n                                )\n                              )\n                            ) : (\n                              <span>{entry[key]}</span>\n                            )}\n                          </div>\n                        ))}\n                      {entry.missingRequiredFields.length > 0 && (\n                        <div className=\"mandatory-missing-fields-text\">\n                          <strong>Missing required fields: </strong>\n                          {entry.missingRequiredFields.map(field => (\n                            <span\n                              key={entry.id + field}\n                            >{`${field.toUpperCase()}, `}</span>\n                          ))}\n                        </div>\n                      )}\n                    </td>\n                    <td>\n                      {Object.keys(entry.mandatoryFieldsSuggestions).length > 0\n                        ? Object.keys(entry.mandatoryFieldsSuggestions).map(\n                            key =>\n                              key === \"AUTHOR\" ? (\n                                <div key={entry.id + key}>\n                                  <strong>{key}: </strong>\n                                  {entry.mandatoryFieldsSuggestions.AUTHOR.map(\n                                    (author, index, authorArray) => (\n                                      <span key={entry.id + author.name}>\n                                        {`${author.name} ${\n                                          index === authorArray.length - 1\n                                            ? \"\"\n                                            : \"and \"\n                                        }`}\n                                      </span>\n                                    )\n                                  )}\n                                </div>\n                              ) : (\n                                <div key={entry.id + key}>\n                                  <strong>{key}: </strong>\n                                  {entry.mandatoryFieldsSuggestions[key]}\n                                </div>\n                              )\n                          )\n                        : entry.checkedSearched ? 'not found' : '-'}\n                    </td>\n                  </tr>\n                </tbody>\n              ))}\n            </table>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\nexport default MandatoryFieldsCheck;\n","import React, { Component } from \"react\";\n\nclass AuthorNameCheck extends Component {\n  state = {\n    allSelected: false\n  };\n\n  getInconsistentAuthorEntries = () =>\n    this.props.entries.filter(\n      entry =>\n        entry.AUTHOR != null &&\n        entry.AUTHOR.some(\n          author =>\n            author.abbreviated ||\n            author.misspelling ||\n            author.changedAbbreviation ||\n            author.changedMisspelling\n        )\n    );\n\n  getInconsistentAuthorEntriesCount = () =>\n    this.props.entries.filter(\n      entry =>\n        entry.AUTHOR != null &&\n        entry.AUTHOR.some(author => author.abbreviated || author.misspelling)\n    );\n\n  searchSuggestions = () => {\n    this.props.changeAuthorSuggestion(\n      this.props.authorNameOptions.filter(option => option.checked)\n    );\n  };\n\n  selectAll = () => {\n    const newAllSelectedState = !this.state.allSelected;\n    this.setState({ allSelected: newAllSelectedState });\n    this.props.changeAllAuthorNameOptions(newAllSelectedState);\n  };\n\n  checkCorrectedAuthors = option =>\n    this.props.entries.some(\n      entry =>\n        entry.id === option.entryId &&\n        entry.AUTHOR.some(\n          entryAuthor =>\n            option.author === entryAuthor.name &&\n            !entryAuthor.abbreviated &&\n            !entryAuthor.misspelling\n        )\n    );\n\n  render() {\n    return (\n      <div>\n        <div className=\"statistic\">\n          <h3>Summary</h3>\n          <ul>\n            <li>{this.props.entries.length} entries found</li>\n            {this.getInconsistentAuthorEntriesCount().length > 0 && (\n              <li>\n                {this.getInconsistentAuthorEntriesCount().length} entries with\n                inconsistent author names found\n              </li>\n            )}\n          </ul>\n        </div>\n        {this.getInconsistentAuthorEntries().length > 0 && (\n          <div className=\"corrections-table\">\n            <div>\n              <div>\n              <button className=\"button-author-name-check\"\n                onClick={() =>\n                  this.setState(\n                    { allSelected: false },\n                    this.searchSuggestions()\n                  )\n                }\n                disabled={\n                  !this.props.authorNameOptions.some(option => option.checked)\n                }\n              >\n                Search suggestion online\n              </button>\n              {/* <button className=\"button-author-name-check\"\n                onClick={() =>\n                  this.setState(\n                    { allSelected: false },\n                    this.props.searchSuggestionFile()\n                  )\n                }\n                disabled={\n                  !this.props.authorNameOptions.some(option => option.checked)\n                }\n              >\n                Search suggestion in file\n              </button> */}\n              <button className=\"button-author-name-check\"\n                onClick={() =>\n                  this.setState(\n                    { allSelected: false },\n                    this.props.changeAuthorName('suggestion')\n                  )\n                }\n                disabled={\n                  !this.props.authorNameOptions.some(option => option.checked)\n                }\n              >\n                Set author to file suggestion\n              </button>\n              <button className=\"button-author-name-check\"\n                onClick={() =>\n                  this.setState(\n                    { allSelected: false },\n                    this.props.changeAuthorName('onlineSuggestion')\n                  )\n                }\n                disabled={\n                  !this.props.authorNameOptions.some(option => option.checked)\n                }\n              >\n                Set author to online suggestion\n              </button>\n              </div>\n            </div>\n            <table>\n              <tbody>\n                <tr>\n                  <th>\n                    <input\n                      type=\"checkBox\"\n                      name=\"select-all-author-name-checkbox\"\n                      checked={this.state.allSelected}\n                      onChange={() => this.selectAll()}\n                    />\n                  </th>\n                  <th>Current Author Name</th>\n                  <th>File suggestion</th>\n                  <th>Online suggestion</th>\n                  <th>Entry Title</th>\n                </tr>\n              </tbody>\n              {this.props.authorNameOptions.map(author => (\n                <tbody key={`${author.entryId}+${author.author}`}>\n                  <tr>\n                    <td\n                      className={\n                        this.checkCorrectedAuthors(author)\n                          ? \"table-entry-green\"\n                          : \"table-entry-red\"\n                      }\n                    >\n                      <center>\n                        <input\n                          type=\"checkBox\"\n                          checked={author.checked}\n                          onChange={() =>\n                            this.props.changeAuthorNameOption(author)\n                          }\n                        />\n                      </center>\n                    </td>\n                    <td\n                      className={\n                        this.checkCorrectedAuthors(author)\n                          ? \"table-entry-green\"\n                          : \"table-entry-red\"\n                      }\n                    >\n                      {author.author}\n                    </td>\n                    <td\n                      className={\n                        this.checkCorrectedAuthors(author)\n                          ? \"table-entry-green\"\n                          : author.suggestion.length > 0\n                          ? \"table-entry-blue\"\n                          : \"table-entry-red\"\n                      }\n                    >\n                      {author.suggestion != null && author.suggestion.length > 0\n                        ? author.suggestion[0]\n                        : \"no suggestion found\"}\n                    </td>\n                    <td className={\n                        this.checkCorrectedAuthors(author)\n                          ? \"table-entry-green\"\n                          : (author.suggestion.length > 0 || author.onlineSuggestion.length > 0)\n                          ? \"table-entry-blue\"\n                          : \"table-entry-red\"\n                      }>\n                      {author.onlineSuggestion.length > 0 ? author.onlineSuggestion[0] : 'no suggestion found'}\n                      {/* {author.onlineSuggestion} */}\n                    </td>\n                    <td className=\"table-entry-grey\">{author.title}</td>\n                  </tr>\n                </tbody>\n              ))}\n            </table>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\nexport default AuthorNameCheck;\n","import React, { Component } from \"react\";\nimport Tabs from \"./Tabs\";\nimport CapitalizationCheck from \"./CapitalizationCheck\";\nimport MandatoryFieldsCheck from \"./MandatoryFieldsCheck\";\nimport AuthorNameCheck from \"./AuthorNameCheck\";\nimport * as BibtexAPI from \"./utils/BibtexAPI\";\n\nclass AnalyzeErrors extends Component {\n  downloadBibtex = bibtexContent => {\n    console.log(bibtexContent);\n    if (bibtexContent != null && bibtexContent.bibtex != null) {\n      const element = document.createElement(\"a\");\n      const file = new Blob([bibtexContent.bibtex], {\n        type: \"text/plain\"\n      });\n      element.href = URL.createObjectURL(file);\n      element.download = \"changedBibTeX.bib\";\n      document.body.appendChild(element); // Required for this to work in FireFox\n      element.click();\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"start-wrapper\">\n        <div className=\"start\">\n          <div>\n            <Tabs>\n              <div\n                label=\"Capitalization\"\n                status={\n                  this.props.entries.every(\n                    entry => entry.capitalization === \"titleCase\"\n                  ) ||\n                  this.props.entries.every(\n                    entry => entry.capitalization === \"sentenceCase\"\n                  )\n                }\n              >\n                <CapitalizationCheck\n                  entries={this.props.entries}\n                  optionsCheckboxes={this.props.capitalizationOptions}\n                  changeOption={this.props.changeOption}\n                  changeAllOptions={this.props.changeAllOptions}\n                  changeSelectedCapitalization={\n                    this.props.changeSelectedCapitalization\n                  }\n                />\n              </div>\n              <div\n                label=\"Author name\"\n                status={\n                  this.props.entries.filter(\n                    entry =>\n                      entry.AUTHOR != null &&\n                      entry.AUTHOR.some(\n                        author => author.abbreviated || author.misspelling\n                      )\n                  ).length === 0\n                }\n              >\n                <AuthorNameCheck\n                  entries={this.props.entries}\n                  getEntriesFromServer={this.props.getEntriesFromServer}\n                  changeAuthorName={this.props.changeAuthorName}\n                  changeAuthorSuggestion={this.props.changeAuthorSuggestion}\n                  authorNameOptions={this.props.authorNameOptions}\n                  changeAuthorNameOption={this.props.changeAuthorNameOption}\n                  changeAllAuthorNameOptions={\n                    this.props.changeAllAuthorNameOptions\n                  }\n                  searchSuggestionFile={this.props.searchSuggestionFile}\n                />\n              </div>\n              <div\n                label=\"Mandatory fields\"\n                status={\n                  !this.props.entries.some(\n                    entry => entry.missingRequiredFields.length > 0\n                  )\n                }\n              >\n                <MandatoryFieldsCheck\n                  entries={this.props.entries}\n                  changeMandatoryFieldCheck={\n                    this.props.changeMandatoryFieldCheck\n                  }\n                  toggleMandatorFieldCheck={this.props.toggleMandatorFieldCheck}\n                  searchMandatoryFieldSuggestion={\n                    this.props.searchMandatoryFieldSuggestion\n                  }\n                  changeAllMandatoryFieldCheck={\n                    this.props.changeAllMandatoryFieldCheck\n                  }\n                  addMissingFields={this.props.addMissingFields}\n                  removeNotMandatoryFields={this.props.removeNotMandatoryFields}\n                />\n              </div>\n            </Tabs>\n          </div>\n          <div className=\"download-button-container\">\n            <button\n              className=\"download-button\"\n              disabled={\n                this.props.entries == null || this.props.entries.length <= 0\n              }\n              onClick={() =>\n                BibtexAPI.getChangedBibtex().then(result =>\n                  this.downloadBibtex(result)\n                )\n              }\n            >\n              Download changes as BibTeX\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\nexport default AnalyzeErrors;\n","const getNotRequiredFields = (entryType, entryKeys) => {\n  let requiredFields = [ 'TITLE', 'AUTHOR', 'URL' ];\n  \n  if (entryType === 'ARTICLE') requiredFields = [ 'TITLE', 'AUTHOR', 'JOURNAL', 'YEAR' ];\n  if (entryType === 'BOOK') requiredFields = [ 'TITLE', 'AUTHOR', 'PUBLISHER', 'YEAR' ];\n  if (entryType === 'BOOKLET') requiredFields = [ 'TITLE' ];\n  if (entryType === 'INBOOK') requiredFields = [ 'TITLE', 'AUTHOR', 'PUBLISHER', 'YEAR', 'CHAPTER' ];\n  if (entryType === 'INCOLLECTION') requiredFields = [ 'TITLE', 'AUTHOR', 'PUBLISHER', 'YEAR', 'BOOKTITLE' ];\n  if (entryType === 'INPROCEEDINGS') requiredFields = [ 'TITLE', 'AUTHOR', 'YEAR', 'BOOKTITLE' ];\n  if (entryType === 'MANUAL') requiredFields = [ 'TITLE' ];\n  if (entryType === 'MASTERTHESIS') requiredFields = [ 'TITLE', 'AUTHOR', 'SCHOOL', 'YEAR' ];\n  if (entryType === 'PHDTHESIS') requiredFields = [ 'TITLE', 'AUTHOR', 'SCHOOL', 'YEAR' ];\n  if (entryType === 'PROCEEDINGS') requiredFields = [ 'TITLE', 'YEAR' ];\n  if (entryType === 'TECHREPORT') requiredFields = [ 'TITLE', 'AUTHOR', 'JOURNAL', 'YEAR' ];\n  if (entryType === 'UNPUBLISHED') requiredFields = [ 'TITLE', 'AUTHOR', 'NOTE' ];\n\n  const nonRequiredFields = entryKeys.filter(key => !requiredFields.includes(key))\n  return nonRequiredFields;\n};\nexport default getNotRequiredFields;","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport AppStart from \"./AppStart\";\nimport * as BibtexAPI from \"./utils/BibtexAPI\";\nimport AnalyzeErrors from \"./AnalzyeErrors\";\nimport getNotRequiredFields from \"./utils/getNotRequiredFields\";\n\nclass App extends Component {\n  state = {\n    bibtexText: \"\",\n    entries: [],\n    capitalizationOptions: [],\n    authorNameOptions: [],\n    status: \"\"\n  };\n\n  componentDidMount() {\n    this.setState(\n      prevState => ({\n        capitalizationOptions: prevState.entries.map(entry => ({\n          id: entry.id,\n          checked: false\n        })),\n        authorNameOptions: this.setInitialAuthorNameOptions(prevState.entries)\n      }),\n      this.getEntriesFromServer()\n    );\n  }\n\n  setInitialAuthorNameOptions = entries => {\n    return entries\n      .filter(\n        entry =>\n          entry.AUTHOR != null &&\n          entry.AUTHOR.some(\n            author =>\n              author.abbreviated ||\n              author.misspelling ||\n              author.changedAbbreviation ||\n              author.changedMisspelling\n          )\n      )\n      .flatMap(entry =>\n        entry.AUTHOR.filter(\n          author =>\n            author.abbreviated ||\n            author.misspelling ||\n            author.changedAbbreviation ||\n            author.changedMisspelling\n        ).map(author => ({\n          entryId: entry.id,\n          title: entry.TITLE,\n          author: author.name,\n          suggestion: author.suggestion,\n          onlineSuggestion: author.onlineSuggestion,\n          checked: false\n        }))\n      )\n      .sort((author1, author2) => {\n        if (author1.author < author2.author) return -1;\n        if (author1.author > author2.author) return 1;\n        return 0;\n      });\n  };\n\n  getEntriesFromServer = () => {\n    BibtexAPI.get().then(stateServer => {\n      this.loadDataFromServer(stateServer);\n    });\n  };\n\n  getSelectedEntries = () =>\n    this.state.entries.filter(entry =>\n      this.state.capitalizationOptions.find(\n        option => option.id === entry.id && option.checked\n      )\n    );\n\n  changeSelectedCapitalization = capitalizationType => {\n    this.setState(\n      prevState => {\n        const newEntries = prevState.entries.map(entry => {\n          if (\n            prevState.capitalizationOptions.some(\n              option => option.id === entry.id && option.checked\n            )\n          ) {\n            const changedEntry = Object.assign({}, entry);\n            if (capitalizationType === \"initialCase\") {\n              changedEntry.capitalization = changedEntry.initialCapitalization;\n              changedEntry.TITLE = changedEntry.correctionInitialCase;\n            } else if (capitalizationType === \"titleCase\") {\n              changedEntry.capitalization = \"titleCase\";\n              changedEntry.TITLE = changedEntry.correctionTitleCase;\n            } else if (capitalizationType === \"sentenceCase\") {\n              changedEntry.capitalization = \"sentenceCase\";\n              changedEntry.TITLE = changedEntry.correctionSentenceCase;\n            }\n            return changedEntry;\n          } else {\n            return Object.assign({}, entry);\n          }\n        });\n        return {\n          entries: newEntries,\n          status: \"changed capitalization of selected entries\"\n        };\n      },\n      () => {\n        BibtexAPI.update({\n          entries: this.state.entries\n        });\n      }\n    );\n    this.changeAllOptions(false);\n  };\n\n  changeAllOptions = allSelected =>\n    this.setState(prevState => ({\n      capitalizationOptions: prevState.capitalizationOptions.map(option => {\n        option.checked = allSelected;\n        return option;\n      })\n    }));\n\n  changeAllAuthorNameOptions = allSelectedAuthorNameOptions =>\n    this.setState(prevState => ({\n      authorNameOptions: prevState.authorNameOptions.map(option => {\n        option.checked = allSelectedAuthorNameOptions;\n        return option;\n      })\n    }));\n\n  changeAuthorNameOption = author => {\n    this.setState(prevState => {\n      const newOptions = prevState.authorNameOptions.map(option => {\n        if (\n          option.author === author.author &&\n          option.entryId === author.entryId\n        ) {\n          const newOption = Object.assign({}, option);\n          newOption.checked = !option.checked;\n          return newOption;\n        } else {\n          return option;\n        }\n      });\n      return { authorNameOptions: newOptions };\n    });\n  };\n\n  changeOptionsCheckboxes = optionToChange =>\n    this.setState(prevState => ({\n      capitalizationOptions: prevState.capitalizationOptions\n        .filter(option => option.id !== optionToChange.id)\n        .concat([optionToChange])\n    }));\n\n  loadDataFromServer = stateServer =>\n    this.setState({\n      entries: stateServer.entries,\n      capitalizationOptions: stateServer.entries.map(entry => ({\n        id: entry.id,\n        checked: false\n      })),\n      authorNameOptions: this.setInitialAuthorNameOptions(stateServer.entries),\n      status:\n        stateServer.entries.length > 0\n          ? \"BibTeX loaded successfully\"\n          : \"No BibTeX found\"\n    });\n\n  setInvalidFileInfo = () => {\n    this.setState({ status: \"ERROR: could not read file, invalid BibTeX\" });\n  };\n\n  onSetBibtexText = textInput => {\n    if (textInput.length > 30 && textInput.includes(\"@\")) {\n      this.setState({ status: \"Found a new BibTeX and loaded entries\" });\n      const textInputObject = { bibtexText: textInput };\n      BibtexAPI.create(textInputObject)\n        .then(() =>\n          BibtexAPI.get()\n            .then(stateServer =>\n              this.setState({\n                entries: stateServer.entries,\n                capitalizationOptions: stateServer.entries.map(entry => ({\n                  id: entry.id,\n                  checked: false\n                })),\n                authorNameOptions: this.setInitialAuthorNameOptions(\n                  stateServer.entries\n                ),\n                status:\n                  stateServer.entries.length > 0\n                    ? \"Found a new BibTeX and loaded entries\"\n                    : \"No BibTeX found\"\n              })\n            )\n            .catch(() => this.setInvalidFileInfo())\n        )\n        .catch(() => this.setInvalidFileInfo());\n    } else {\n      this.setInvalidFileInfo();\n    }\n  };\n\n  changeAuthorName = suggestionArray => {\n    let changedNames = 0;\n    this.setState(\n      prevState => {\n        const newEnries = prevState.entries.map(entry => {\n          if (\n            entry.AUTHOR != null &&\n            this.state.authorNameOptions.some(\n              option => option.entryId === entry.id && option.checked\n            )\n          ) {\n            const newEntry = Object.assign({}, entry);\n            const newEntryAuthor = newEntry.AUTHOR.map(author => {\n              const authorOption = this.state.authorNameOptions.find(\n                option =>\n                  option.author === author.name &&\n                  option.checked &&\n                  option.entryId === entry.id\n              );\n              if (\n                authorOption != null &&\n                author[suggestionArray] != null &&\n                author[suggestionArray].length > 0 &&\n                (author.abbreviated ||\n                  author.misspelling ||\n                  author.changedAbbreviation)\n              ) {\n                const newAuthor = Object.assign({}, author);\n                newAuthor.name = newAuthor[suggestionArray][0];\n                changedNames++;\n                if (author.abbreviated) {\n                  newAuthor.abbreviated = false;\n                  newAuthor.changedAbbreviation = true;\n                }\n                if (author.misspelling) {\n                  newAuthor.misspelling = false;\n                  newAuthor.changedMisspelling = true;\n                }\n                return newAuthor;\n              } else return author;\n            });\n            newEntry.AUTHOR = newEntryAuthor;\n            return newEntry;\n          } else {\n            return entry;\n          }\n        });\n        return {\n          entries: newEnries,\n          status:\n            changedNames > 0\n              ? `Changed ${changedNames} author name(s)`\n              : `Changed no author name`\n        };\n      },\n      () => {\n        this.setState(\n          prevState => ({\n            authorNameOptions: this.setInitialAuthorNameOptions(\n              prevState.entries\n            )\n          }),\n          () => {\n            BibtexAPI.update({\n              entries: this.state.entries\n            });\n          }\n        );\n      }\n    );\n  };\n\n  changeAuthorSuggestion = options => {\n    let foundCount = 0;\n    this.setState({ status: \"searching author online...\" });\n    options.forEach(option => {\n      this.searchAuthorSuggestion(option.title, option.author).then(\n        foundAuthorSuggestion => {\n          if (foundAuthorSuggestion != null) {\n            this.setState(\n              prevState => {\n                const changedEntries = prevState.entries.map(entry => {\n                  if (entry.id === option.entryId) {\n                    const changedAuthors = entry.AUTHOR.map(author => {\n                      if (\n                        author.name === option.author &&\n                        !author.onlineSuggestion.includes(foundAuthorSuggestion)\n                      ) {\n                        foundCount++;\n                        const changedAuthor = Object.assign({}, author);\n                        changedAuthor.onlineSuggestion.unshift(\n                          foundAuthorSuggestion\n                        );\n                        return changedAuthor;\n                      } else return author;\n                    });\n                    entry.AUTHOR = changedAuthors;\n                    return entry;\n                  } else return entry;\n                });\n                return {\n                  entries: changedEntries,\n                  status:\n                    foundCount > 0\n                      ? `Found ${foundCount} author name(s) online`\n                      : `No author name found`\n                };\n              },\n              () => {\n                BibtexAPI.update({\n                  entries: this.state.entries\n                });\n                this.setState(prevState => ({\n                  authorNameOptions: this.setInitialAuthorNameOptions(\n                    prevState.entries\n                  )\n                }));\n              }\n            );\n          }\n        }\n      );\n    });\n  };\n\n  // searchSuggestionFile = () => {\n  //   const changedEntries = [...this.state.entries];\n  //   this.state.authorNameOptions\n  //     .filter(option => option.checked && option.suggestion.length > 1)\n  //     .forEach(option => {\n  //       const changedEntry = {\n  //         ...changedEntries.find(entry => entry.id === option.entryId)\n  //       };\n  //       const changedAuthors = [...changedEntry.AUTHOR];\n  //       const changedFoundAuthor = {\n  //         ...changedAuthors.find(author => author.name === option.author)\n  //       };\n  //       const lastSuggestion =\n  //         changedFoundAuthor.suggestion[\n  //           changedFoundAuthor.suggestion.length - 1\n  //         ];\n  //       changedFoundAuthor.suggestion = [];\n  //       changedFoundAuthor.suggestion.unshift(lastSuggestion);\n  //       changedAuthors[changedFoundAuthor.id] = changedFoundAuthor;\n  //       changedEntry.AUTHOR = changedAuthors;\n  //       changedEntries[changedEntry.id] = changedEntry;\n  //     });\n  //   this.setState({ entries: changedEntries }, () => {\n  //     BibtexAPI.update({\n  //       entries: this.state.entries\n  //     });\n  //     this.setState(prevState => ({\n  //       authorNameOptions: this.setInitialAuthorNameOptions(prevState.entries)\n  //     }));\n  //   });\n  // };\n\n  searchAuthorSuggestion = (title, author) => {\n    return BibtexAPI.searchAuthor(\n      title.replace(/[\\s]+/g, \"+\"),\n      author.replace(/[\\s]+/g, \"+\")\n    ).then(result => {\n      if (\n        result != null &&\n        result.message != null &&\n        result.message.items.length > 0 &&\n        result.message.items[0].author != null\n      ) {\n        const foundAuthor = result.message.items[0].author.find(itemAuthor =>\n          author.startsWith(itemAuthor.family)\n        );\n        if (foundAuthor != null) {\n          return `${foundAuthor.family}, ${foundAuthor.given}`;\n        } else return null;\n      } else return null;\n    });\n  };\n\n  searchFieldSuggestion = title =>\n    BibtexAPI.searchMissingField(title.replace(/[\\s]+/g, \"+\")).then(result => {\n      if (\n        result != null &&\n        result.message != null &&\n        result.message.items.length > 0 &&\n        result.message.items[0] != null\n      ) {\n        return result.message.items[0];\n      } else return null;\n    });\n\n  changeAllMandatoryFieldCheck = checked => {\n    const changedEntries = [...this.state.entries];\n    changedEntries.forEach((entry, index) => {\n      changedEntries[index] = { ...entry, mandatoryFieldsCheck: checked };\n    });\n    this.setState({ entries: changedEntries }, () =>\n      BibtexAPI.update({\n        entries: this.state.entries\n      })\n    );\n  };\n\n  toggleMandatorFieldCheck = id =>\n    this.changeMandatoryFieldCheck(\n      id,\n      !this.state.entries[id].mandatoryFieldsCheck\n    );\n\n  changeMandatoryFieldCheck = (id, checked) => {\n    const changedEntries = [...this.state.entries];\n    const changedEntry = {\n      ...changedEntries[id],\n      mandatoryFieldsCheck: checked\n    };\n    changedEntries[id] = changedEntry;\n    this.setState({ entries: changedEntries });\n  };\n\n  searchMandatoryFieldSuggestion = () => {\n    let foundFields = 0;\n    const changedEntries = [...this.state.entries];\n    if (\n      changedEntries.some(\n        entry =>\n          entry.mandatoryFieldsCheck && entry.missingRequiredFields.length > 0\n      )\n    ) {\n      this.setState({ status: \"searching mandatory fields online...\" });\n    } else {\n      this.setState({\n        status: \"every mandatory field is available, searching not necessary\"\n      });\n    }\n    changedEntries\n      .filter(\n        entry =>\n          entry.mandatoryFieldsCheck && entry.missingRequiredFields.length > 0\n      )\n      .forEach(entry => {\n        const changedEntry = { ...changedEntries[entry.id] };\n        changedEntry.checkedSearched = true;\n        this.searchFieldSuggestion(changedEntry.TITLE).then(result => {\n          if (\n            result.title.length > 0 &&\n            result.title[0]\n              .toLowerCase()\n              .startsWith(entry.TITLE.toLowerCase()[0])\n          ) {\n            const changedMissingFields = [...entry.missingRequiredFields];\n            changedMissingFields.forEach(missingField => {\n              const missingFieldUpperCase = missingField.toUpperCase();\n              if (\n                (missingFieldUpperCase === \"BOOKTITLE\" ||\n                  missingFieldUpperCase === \"JOURNAL\") &&\n                result[\"container-title\"] != null &&\n                result[\"container-title\"].length > 0\n              ) {\n                foundFields++;\n                changedEntry.mandatoryFieldsSuggestions[missingFieldUpperCase] =\n                  result[\"container-title\"][0];\n                changedEntries[entry.id] = changedEntry;\n                this.setState(\n                  {\n                    entries: changedEntries,\n                    status:\n                      foundFields > 0\n                        ? `Found ${foundFields} mandatory field(s) online`\n                        : `Found no mandatory fields online`\n                  },\n                  () =>\n                    BibtexAPI.update({\n                      entries: this.state.entries\n                    })\n                );\n              } else {\n                changedEntries[entry.id] = changedEntry;\n                this.setState(\n                  {\n                    entries: changedEntries,\n                    status:\n                      foundFields > 0\n                        ? `Found ${foundFields} mandatory field(s) online`\n                        : `Found no mandatory fields online`\n                  },\n                  () =>\n                    BibtexAPI.update({\n                      entries: this.state.entries\n                    })\n                );\n              }\n              if (missingFieldUpperCase === \"YEAR\" && result.created != null) {\n                foundFields++;\n                changedEntry.mandatoryFieldsSuggestions.YEAR =\n                  result.created[\"date-parts\"][0][0];\n                changedEntries[entry.id] = changedEntry;\n                this.setState(\n                  {\n                    entries: changedEntries,\n                    status:\n                      foundFields > 0\n                        ? `Found ${foundFields} mandatory field(s) online`\n                        : `Found no mandatory fields online`\n                  },\n                  () =>\n                    BibtexAPI.update({\n                      entries: this.state.entries\n                    })\n                );\n              } else {\n                changedEntries[entry.id] = changedEntry;\n                this.setState(\n                  {\n                    entries: changedEntries,\n                    status:\n                      foundFields > 0\n                        ? `Found ${foundFields} mandatory field(s) online`\n                        : `Found no mandatory fields online`\n                  },\n                  () =>\n                    BibtexAPI.update({\n                      entries: this.state.entries\n                    })\n                );\n              }\n              if (\n                missingFieldUpperCase === \"AUTHOR\" &&\n                result.author != null &&\n                result.author.length > 0\n              ) {\n                foundFields++;\n                const authors = result.author.map(author => ({\n                  name: `${author.family}, ${author.given}`,\n                  abbreviated: false,\n                  changedAbbreviation: false,\n                  misspelling: false,\n                  changedMisspelling: false,\n                  suggestion: []\n                }));\n                changedEntry.mandatoryFieldsSuggestions.AUTHOR = authors;\n                changedEntries[entry.id] = changedEntry;\n                this.setState(\n                  {\n                    entries: changedEntries,\n                    status:\n                      foundFields > 0\n                        ? `Found ${foundFields} mandatory field(s) online`\n                        : `Found no mandatory fields online`\n                  },\n                  () =>\n                    BibtexAPI.update({\n                      entries: this.state.entries\n                    })\n                );\n              } else {\n                changedEntries[entry.id] = changedEntry;\n                this.setState(\n                  {\n                    entries: changedEntries,\n                    status:\n                      foundFields > 0\n                        ? `Found ${foundFields} mandatory field(s) online`\n                        : `Found no mandatory fields online`\n                  },\n                  () =>\n                    BibtexAPI.update({\n                      entries: this.state.entries\n                    })\n                );\n              }\n            });\n          } else {\n            changedEntries[entry.id] = changedEntry;\n            this.setState(\n              {\n                entries: changedEntries,\n                status:\n                  foundFields > 0\n                    ? `Found ${foundFields} mandatory field(s) online`\n                    : `Found no mandatory fields online`\n              },\n              () =>\n                BibtexAPI.update({\n                  entries: this.state.entries\n                })\n            );\n          }\n        });\n      });\n  };\n\n  addMissingFields = () => {\n    const changedEntries = [...this.state.entries];\n    let addedFieldSum = 0;\n    changedEntries\n      .filter(\n        entry =>\n          entry.mandatoryFieldsCheck &&\n          entry.missingRequiredFields.length > 0 &&\n          Object.keys(entry.mandatoryFieldsSuggestions).length > 0\n      )\n      .forEach(entry => {\n        const changedEntry = { ...entry, ...entry.mandatoryFieldsSuggestions };\n        const suggestedFieldsKeys = Object.keys(\n          changedEntry.mandatoryFieldsSuggestions\n        );\n        let changedMissingRequiredFields = [\n          ...changedEntry.missingRequiredFields\n        ];\n        suggestedFieldsKeys.forEach(field => {\n          addedFieldSum++;\n          changedMissingRequiredFields = changedMissingRequiredFields.filter(\n            missingField => missingField !== field.toLowerCase()\n          );\n        });\n        changedEntry.missingRequiredFields = changedMissingRequiredFields;\n        changedEntries[entry.id] = changedEntry;\n      });\n    this.setState(\n      {\n        entries: changedEntries,\n        status:\n          addedFieldSum > 0\n            ? `Added ${addedFieldSum} mandatory field(s) to entries`\n            : `Added no field`\n      },\n      () => this.changeAllMandatoryFieldCheck(false)\n    );\n  };\n\n  removeNotMandatoryFields = () => {\n    let deletedFieldsSum = 0;\n    const changedEntries = [...this.state.entries];\n    changedEntries\n      .filter(entry => entry.mandatoryFieldsCheck)\n      .forEach(entry => {\n        const changedEntry = { ...entry };\n        const entryKeys = Object.keys(changedEntry).filter(\n          keys => keys === keys.toUpperCase()\n        );\n        const notRequiredFields = getNotRequiredFields(\n          changedEntry.entryType,\n          entryKeys\n        );\n        notRequiredFields.forEach(field => {\n          deletedFieldsSum++;\n          delete changedEntry[field];\n        });\n        changedEntries[entry.id] = changedEntry;\n      });\n    this.setState(\n      {\n        entries: changedEntries,\n        status:\n          deletedFieldsSum > 0\n            ? `Deleted ${deletedFieldsSum} field(s)`\n            : `Deleted no field`\n      },\n      () => this.changeAllMandatoryFieldCheck(false)\n    );\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <div className=\"App-header-text\">cleanBibTeX</div>\n        </header>\n        <AppStart setBibtex={this.onSetBibtexText} />\n        <div className=\"start-status\">{this.state.status}</div>\n        {this.state.entries != null && this.state.entries.length > 0 && (\n          <AnalyzeErrors\n            entries={this.state.entries}\n            capitalizationOptions={this.state.capitalizationOptions}\n            changeOption={this.changeOptionsCheckboxes}\n            changeAllOptions={this.changeAllOptions}\n            changeSelectedCapitalization={this.changeSelectedCapitalization}\n            getEntriesFromServer={this.getEntriesFromServer}\n            changeAuthorName={this.changeAuthorName}\n            changeAuthorSuggestion={this.changeAuthorSuggestion}\n            authorNameOptions={this.state.authorNameOptions}\n            changeAuthorNameOption={this.changeAuthorNameOption}\n            changeAllAuthorNameOptions={this.changeAllAuthorNameOptions}\n            changeMandatoryFieldCheck={this.changeMandatoryFieldCheck}\n            toggleMandatorFieldCheck={this.toggleMandatorFieldCheck}\n            searchMandatoryFieldSuggestion={this.searchMandatoryFieldSuggestion}\n            changeAllMandatoryFieldCheck={this.changeAllMandatoryFieldCheck}\n            addMissingFields={this.addMissingFields}\n            removeNotMandatoryFields={this.removeNotMandatoryFields}\n            searchSuggestionFile={this.searchSuggestionFile}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n//import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//serviceWorker.unregister();\n"],"sourceRoot":""}