{"version":3,"sources":["FileUpload.js","AppStart.js","utils/BibtexAPI.js","Tab.js","Tabs.js","CapitalizationCheck.js","MandatoryFieldsCheck.js","AuthorNameCheck.js","AnalzyeErrors.js","utils/getNotRequiredFields.js","App.js","index.js"],"names":["readFileAsText","file","Promise","resolve","reader","FileReader","onload","event","target","result","readAsText","FileUpload","props","className","htmlFor","id","type","onChange","files","then","text","length","setBibtex","AppStart","onChangeText","setState","textInput","checkIfBibtex","state","includes","console","log","isBibtex","placeholder","value","this","bibtexText","Component","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","get","fetch","res","json","update","body","method","JSON","stringify","create","searchAuthor","title","author","searchMissingField","Tab","onClick","label","activeTab","status","Tabs","onClickTab","tab","children","map","child","key","CapitalizationCheck","correctedElements","allSelected","handleSaveSelection","options","selectAll","newAllSelectedState","changeAllOptions","handleChangeOption","optionToChange","optionsCheckboxes","find","option","checked","changeOption","changeSelected","capitalizationType","some","changeSelectedCapitalization","getCaseSum","caseSum","titleCaseSum","sentenceCaseSum","noCaseSum","entries","forEach","entry","capitalization","disabled","name","TITLE","correctionTitleCase","correctionSentenceCase","MandatoryFieldsCheck","changeAllMandatoryFieldCheck","getMissingFieldEntriesSum","filter","missingRequiredFields","searchMandatoryFieldSuggestion","mandatoryFieldsCheck","addMissingFields","removeNotMandatoryFields","Object","keys","mandatoryFieldsSuggestions","toggleMandatorFieldCheck","toUpperCase","index","authorArray","field","AUTHOR","AuthorNameCheck","getInconsistentAuthorEntries","abbreviated","misspelling","changedAbbreviation","changedMisspelling","getInconsistentAuthorEntriesCount","searchSuggestions","changeAuthorSuggestion","authorNameOptions","changeAllAuthorNameOptions","checkCorrectedAuthors","entryId","entryAuthor","changeAuthorName","changeAuthorNameOption","suggestion","AnalyzeErrors","downloadBibtex","bibtexContent","bibtex","element","document","createElement","Blob","href","URL","createObjectURL","download","appendChild","click","capitalizationOptions","getEntriesFromServer","changeMandatoryFieldCheck","getNotRequiredFields","entryType","entryKeys","requiredFields","App","setInitialAuthorNameOptions","flatMap","sort","author1","author2","BibtexAPI","stateServer","loadDataFromServer","getSelectedEntries","prevState","changedEntry","assign","initialCapitalization","correctionInitialCase","allSelectedAuthorNameOptions","newOption","changeOptionsCheckboxes","concat","onSetBibtexText","newEntry","newEntryAuthor","newAuthor","searchAuthorSuggestion","foundAuthorSuggestion","changedAuthors","changedAuthor","unshift","replace","message","items","foundAuthor","itemAuthor","startsWith","family","given","searchFieldSuggestion","changedEntries","toLowerCase","missingField","missingFieldUpperCase","created","YEAR","authors","suggestedFieldsKeys","changedMissingRequiredFields","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.47c68e20.chunk.js","sourcesContent":["import React from \"react\";\n\nconst readFileAsText = file =>\n  new Promise(resolve => {\n    const reader = new FileReader();\n    reader.onload = event => {\n      resolve(event.target.result);\n    };\n    reader.readAsText(file);\n  });\n\nfunction FileUpload(props) {\n  const handleFileChange = event => {\n    const file = event.target.files[0];\n    if (file) {\n      readFileAsText(file).then(text => {\n        if (text.length > 3) {\n          // console.log(text);\n          props.setBibtex(text);\n        }\n      });\n    }\n  };\n\n  return (\n    <div className=\"start-upload-button\">\n      <label htmlFor=\"file\">\n        <br />\n        <br />\n        <br />\n        Upload BibteX\n      </label>\n      <input\n        id=\"file\"\n        className=\"input-file\"\n        type=\"file\"\n        onChange={handleFileChange}\n      />\n    </div>\n  );\n}\nexport default FileUpload;\n","import React, { Component } from \"react\";\nimport FileUpload from \"./FileUpload\";\n\nclass AppStart extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isBibtex: false,\n      textInput: \"\"\n    };\n  }\n\n  onChangeText = text => {\n    this.setState({ textInput: text }, () => this.checkIfBibtex());\n  };\n\n  checkIfBibtex = () => {\n    if (\n      this.state.textInput.length > 30 &&\n      this.state.textInput.includes(\"@\")\n    ) {\n      console.log(\"is probably bibtex, will send to server\");\n      this.props.setBibtex(this.state.textInput);\n    } else {\n      console.log(\"is not a bibtex, not sending to server\");\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"start-wrapper\">\n        <div className=\"start\">\n          <div className=\"start-inputs\">\n            <textarea\n              className=\"start-input-field\"\n              type=\"text\"\n              placeholder=\"Paste your BibTeX file here\"\n              value={this.state.bibtexText}\n              onChange={event => this.onChangeText(event.target.value)}\n            />\n            <FileUpload setBibtex={this.props.setBibtex} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\nexport default AppStart;\n","// const api = \"http://127.0.0.1:5000\";\nconst crossrefApi = 'https://api.crossref.org';\n\nlet token = localStorage.token;\n\nif (!token) {\n  token = localStorage.token = Math.random().toString(36).substr(-8)\n}\nconst headers = {\n  Accept: \"application/json\",\n  Authorization: token\n};\n\nexport const get = () =>\n  fetch(`/bibtex`, { headers })\n    .then(res => res.json());\n\nexport const update = body =>\n  fetch(`/update`, {\n  method: \"POST\",\n  headers: {\n    ...headers,\n    \"Content-Type\": \"application/json\"\n  },\n  body: JSON.stringify(body)\n}).then(res => res);\n\nexport const create = body =>\n  fetch(`/bibtex`, {\n    method: \"POST\",\n    headers: {\n      ...headers,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(body)\n  }).then(res => res.json());\n\nexport const getChangedBibtex = () =>\n  fetch(`/changedBibtex`, {headers})\n    .then(res => res.json());\n\nexport const searchAuthor = (title, author) =>\n  fetch(`${crossrefApi}/works?query.bibliographic=${title}&query.author=${author}&rows=1`)\n    .then(res => res.json());\n\nexport const searchMissingField = title =>\n  fetch(`${crossrefApi}/works?query.bibliographic=${title}&rows=1`)\n      .then(res => res.json());\n","import React, { Component } from \"react\";\n\n// import PropTypes from 'prop-types';\n\nclass Tab extends Component {\n  onClick = () => {\n    const { label, onClick } = this.props;\n    onClick(label);\n  };\n\n  render() {\n    const {\n      onClick,\n      props: { activeTab, label, status }\n    } = this;\n\n    let className = \"tab-list-item\";\n\n    if (activeTab === label) {\n      className += \" tab-list-active\";\n    }\n\n    return (\n      <li className={className} onClick={onClick}>\n        {`${label} - ${status ? 'ok' : 'inconsistencies found'}`}\n      </li>\n    );\n  }\n}\n\nexport default Tab;\n","import React, { Component } from \"react\";\nimport Tab from \"./Tab\";\n\nclass Tabs extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      activeTab: this.props.children[0].props.label,\n    };\n  }\n\n  onClickTab = tab => this.setState({ activeTab: tab });\n\n  render() {\n    const {\n      onClickTab,\n      props: { children },\n      state: { activeTab }\n    } = this;\n\n    return (\n      <div className=\"tabs\">\n        <ol className=\"tab-list\">\n          {children.map(child => {\n            const { label, status } = child.props;\n            return (\n              <Tab\n                activeTab={activeTab}\n                key={label}\n                label={label}\n                onClick={onClickTab}\n                status={status}\n              />\n            );\n          })}\n        </ol>\n        <div className=\"tab-content\">\n          {children.map(child => {\n            if (child.props.label !== activeTab) {\n              return undefined;\n            }\n            return child.props.children;\n          })}\n        </div>\n      </div>\n    );\n  }\n}\nexport default Tabs;\n","import React, { Component } from \"react\";\n\nclass CapitalizationCheck extends Component {\n  state = {\n    correctedElements: [],\n    allSelected: false\n  };\n\n  handleSaveSelection = () => {\n    console.log(this.props.options);\n  };\n\n  selectAll = () => {\n    const newAllSelectedState = !this.state.allSelected;\n    this.setState({\n      allSelected: newAllSelectedState\n    });\n    this.props.changeAllOptions(newAllSelectedState);\n  };\n\n  handleChangeOption = id => {\n    const optionToChange = this.props.optionsCheckboxes.find(\n      option => option.id === id\n    );\n    optionToChange.checked = !optionToChange.checked;\n\n    this.props.changeOption(optionToChange);\n  };\n\n  changeSelected = capitalizationType => {\n    if (\n      this.props.optionsCheckboxes.some(option => option.checked) ||\n      this.state.allSelected\n    ) {\n      this.props.changeSelectedCapitalization(capitalizationType);\n      this.setState({\n        allSelected: false\n      });\n    }\n  };\n\n  getCaseSum = () => {\n    const caseSum = {\n      titleCaseSum: 0,\n      sentenceCaseSum: 0,\n      noCaseSum: 0\n    };\n    this.props.entries.forEach(entry => {\n      if (entry.capitalization === \"titleCase\") caseSum.titleCaseSum++;\n      else if (entry.capitalization === \"sentenceCase\")\n        caseSum.sentenceCaseSum++;\n      else caseSum.noCaseSum++;\n    });\n    return caseSum;\n  };\n\n  render() {\n    const { entries, optionsCheckboxes } = this.props;\n\n    return (\n      <div>\n        <div className=\"statistic\">\n          <h3>Summary</h3>\n          <ul>\n            <li>{entries.length} Entries found</li>\n            {this.getCaseSum().titleCaseSum > 0 && (\n              <li>{this.getCaseSum().titleCaseSum} Title case entries found</li>\n            )}\n            {this.getCaseSum().sentenceCaseSum > 0 && (\n              <li>\n                {this.getCaseSum().sentenceCaseSum} Sentence case entries found\n              </li>\n            )}\n            {this.getCaseSum().noCaseSum > 0 && (\n              <li>{this.getCaseSum().noCaseSum} without known case found</li>\n            )}\n          </ul>\n        </div>\n\n        {entries.length > 0 && (\n          <div className=\"corrections-table\">\n            <button\n              className=\"btn-select-all\"\n              disabled={!optionsCheckboxes.some(option => option.checked)}\n              onClick={() => this.changeSelected(\"titleCase\")}\n            >\n              Set selected to title case\n            </button>\n            <button\n              className=\"btn-select-all\"\n              disabled={!optionsCheckboxes.some(option => option.checked)}\n              onClick={() => this.changeSelected(\"sentenceCase\")}\n            >\n              Set selected to sentence case\n            </button>\n            <button\n              className=\"btn-select-all\"\n              disabled={!optionsCheckboxes.some(option => option.checked)}\n              onClick={() => this.changeSelected(\"initialCase\")}\n            >\n              Set selected to initial case\n            </button>\n            <table>\n              <tbody>\n                <tr>\n                  <th>\n                    <input\n                      type=\"checkBox\"\n                      name=\"select-all-checkbox\"\n                      checked={this.state.allSelected}\n                      onChange={() => this.selectAll()}\n                    />\n                  </th>\n                  <th>\n                    Current\n                  </th>\n                  <th>Title case</th>\n                  <th>Sentence case</th>\n                </tr>\n              </tbody>\n              {entries.map(entry => (\n                <tbody key={entry.id}>\n                  <tr>\n                    <td\n                      className={\n                        entry.capitalization === \"titleCase\"\n                          ? \"table-entry-green\"\n                          : entry.capitalization === \"sentenceCase\"\n                            ? \"table-entry-blue\"\n                            : \"table-entry-red\"\n                      }\n                    >\n                      <input\n                        id={entry.id}\n                        type=\"checkBox\"\n                        checked={\n                          optionsCheckboxes.find(\n                            option => option.id === entry.id\n                          ).checked\n                        }\n                        onChange={() => this.handleChangeOption(entry.id)}\n                      />\n                    </td>\n                    <td\n                      className={\n                        entry.capitalization === \"titleCase\"\n                          ? \"table-entry-green\"\n                          : entry.capitalization === \"sentenceCase\"\n                            ? \"table-entry-blue\"\n                            : \"table-entry-red\"\n                      }\n                    >\n                      {entry.TITLE}\n                    </td>\n                    <td className=\"table-entry-green\">\n                      {entry.correctionTitleCase}\n                    </td>\n                    <td className=\"table-entry-blue\">\n                      {entry.correctionSentenceCase}\n                    </td>\n                  </tr>\n                </tbody>\n              ))}\n            </table>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\nexport default CapitalizationCheck;\n","import React, { Component } from \"react\";\n\nclass MandatoryFieldsCheck extends Component {\n  state = {\n    allSelected: false\n  };\n\n  selectAll = () => {\n    const newAllSelectedState = !this.state.allSelected;\n    this.setState({ allSelected: newAllSelectedState });\n    this.props.changeAllMandatoryFieldCheck(newAllSelectedState);\n  };\n\n  getMissingFieldEntriesSum = () =>\n    this.props.entries.filter(entry => entry.missingRequiredFields.length > 0)\n      .length;\n\n  render() {\n    return (\n      <div>\n        <div className=\"statistic\">\n          <h3>Summary</h3>\n          <ul>\n            <li>{this.props.entries.length} entries found</li>\n            {this.getMissingFieldEntriesSum() > 0 && (\n              <li>\n                {`${this.getMissingFieldEntriesSum()} entries with missing required fields found`}\n              </li>\n            )}\n          </ul>\n        </div>\n        {this.props.entries.length > 0 && (\n          <div className=\"corrections-table\">\n            <button\n              onClick={() => this.props.searchMandatoryFieldSuggestion()}\n              disabled={\n                !this.props.entries.some(entry => entry.mandatoryFieldsCheck)\n              }\n            >\n              Search missing fields online\n            </button>\n            <button\n              disabled={\n                !this.props.entries.some(entry => entry.mandatoryFieldsCheck)\n              }\n              onClick={() => {\n                this.setState({ allSelected: false });\n                this.props.addMissingFields();\n              }}\n            >\n              Add field suggestion to entry\n            </button>\n            <button\n              onClick={() => {\n                this.setState({ allSelected: false });\n                this.props.removeNotMandatoryFields();\n              }}\n              disabled={\n                !this.props.entries.some(entry => entry.mandatoryFieldsCheck)\n              }\n            >\n              Remove not mandatory fields\n            </button>\n            <table>\n              <tbody>\n                <tr>\n                  <th>\n                    <input\n                      type=\"checkBox\"\n                      name=\"select-all-missing-fields-checkbox\"\n                      checked={this.state.allSelected}\n                      onChange={() => this.selectAll()}\n                    />\n                  </th>\n                  <th>Current entry</th>\n                  <th>Suggestion for missing fields</th>\n                </tr>\n              </tbody>\n              {this.props.entries.map(entry => (\n                <tbody key={entry.id}>\n                  <tr\n                    className={\n                      entry.missingRequiredFields.length === 0\n                        ? \"table-entry-green\"\n                        : Object.keys(entry.mandatoryFieldsSuggestions).length >\n                          0\n                        ? \"table-entry-blue\"\n                        : \"table-entry-red\"\n                    }\n                  >\n                    <td>\n                      <input\n                        type=\"checkBox\"\n                        checked={entry.mandatoryFieldsCheck}\n                        onChange={() =>\n                          this.props.toggleMandatorFieldCheck(entry.id)\n                        }\n                      />\n                    </td>\n                    <td>\n                      {Object.keys(entry)\n                        .filter(key => key === key.toUpperCase())\n                        .map(key => (\n                          <div key={`${entry.id}+${key}`}>\n                            <strong>{key}: </strong>\n                            {entry[key] == null ? (\n                              \"<EMPTY>\"\n                            ) : key === \"AUTHOR\" ? (\n                              entry[key].map((author, index, authorArray) =>\n                                index === authorArray.length - 1 ? (\n                                  <span key={entry.id + author.name}>\n                                    {author.name}\n                                  </span>\n                                ) : (\n                                  <span key={entry.id + author.name}>\n                                    {author.name} and{\" \"}\n                                  </span>\n                                )\n                              )\n                            ) : (\n                              <span>{entry[key]}</span>\n                            )}\n                          </div>\n                        ))}\n                      {entry.missingRequiredFields.length > 0 && (\n                        <div>\n                          Missing required fields:{\" \"}\n                          {entry.missingRequiredFields.map(field => (\n                            <span\n                              key={entry.id + field}\n                            >{`${field.toUpperCase()}, `}</span>\n                          ))}\n                        </div>\n                      )}\n                    </td>\n                    <td>\n                      {Object.keys(entry.mandatoryFieldsSuggestions).length > 0\n                        ? Object.keys(entry.mandatoryFieldsSuggestions).map(\n                            key =>\n                              key === \"AUTHOR\" ? (\n                                <div key={entry.id + key}>\n                                  <strong>{key}: </strong>\n                                  {entry.mandatoryFieldsSuggestions.AUTHOR.map(\n                                    (author, index, authorArray) => (\n                                      <span key={entry.id + author.name}>\n                                        {`${author.name} ${\n                                          index === authorArray.length - 1\n                                            ? \"\"\n                                            : \"and \"\n                                        }`}\n                                      </span>\n                                    )\n                                  )}\n                                </div>\n                              ) : (\n                                <div key={entry.id + key}>\n                                  <strong>{key}: </strong>\n                                  {entry.mandatoryFieldsSuggestions[key]}\n                                </div>\n                              )\n                          )\n                        : \"-\"}\n                    </td>\n                  </tr>\n                </tbody>\n              ))}\n            </table>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\nexport default MandatoryFieldsCheck;\n","import React, { Component } from \"react\";\n\nclass AuthorNameCheck extends Component {\n  state = {\n    allSelected: false\n  };\n\n  getInconsistentAuthorEntries = () =>\n    this.props.entries.filter(\n      entry =>\n        entry.AUTHOR != null &&\n        entry.AUTHOR.some(\n          author =>\n            author.abbreviated ||\n            author.misspelling ||\n            author.changedAbbreviation ||\n            author.changedMisspelling\n        )\n    );\n\n  getInconsistentAuthorEntriesCount = () =>\n    this.props.entries.filter(\n      entry =>\n        entry.AUTHOR != null &&\n        entry.AUTHOR.some(author => author.abbreviated || author.misspelling)\n    );\n\n  searchSuggestions = () => {\n    this.props.changeAuthorSuggestion(\n      this.props.authorNameOptions.filter(option => option.checked)\n    );\n  };\n\n  selectAll = () => {\n    const newAllSelectedState = !this.state.allSelected;\n    this.setState({ allSelected: newAllSelectedState });\n    this.props.changeAllAuthorNameOptions(newAllSelectedState);\n  };\n\n  checkCorrectedAuthors = option =>\n    this.props.entries.some(\n      entry =>\n        entry.id === option.entryId &&\n        entry.AUTHOR.some(\n          entryAuthor =>\n            option.author === entryAuthor.name &&\n            !entryAuthor.abbreviated &&\n            !entryAuthor.misspelling\n        )\n    );\n\n  render() {\n    return (\n      <div>\n        <div className=\"statistic\">\n          <h3>Summary</h3>\n          <ul>\n            <li>{this.props.entries.length} entries found</li>\n            <li>\n              {this.getInconsistentAuthorEntriesCount().length} entries with\n              inconsistent author names found\n            </li>\n          </ul>\n        </div>\n        {this.getInconsistentAuthorEntries().length > 0 && (\n          <div className=\"corrections-table\">\n            <button\n              onClick={() =>\n                this.setState({ allSelected: false }, this.searchSuggestions())\n              }\n              disabled={!this.props.authorNameOptions.some(option => option.checked)}\n            >\n              Search author suggestion online\n            </button>\n            <button\n              onClick={() =>\n                this.setState(\n                  { allSelected: false },\n                  this.props.changeAuthorName()\n                )\n              }\n              disabled={!this.props.authorNameOptions.some(option => option.checked)}\n            >\n              Change author name to suggestion\n            </button>\n            <table>\n              <tbody>\n                <tr>\n                  <th>\n                    <input\n                      type=\"checkBox\"\n                      name=\"select-all-author-name-checkbox\"\n                      checked={this.state.allSelected}\n                      onChange={() => this.selectAll()}\n                    />\n                  </th>\n                  <th>\n                    Current Author Name\n                  </th>\n                  <th>Author Name Suggestion</th>\n                  <th>Entry Title</th>\n                </tr>\n              </tbody>\n              {this.props.authorNameOptions.map(author => (\n                <tbody key={`${author.entryId}+${author.author}`}>\n                  <tr>\n                    <td\n                      className={\n                        this.checkCorrectedAuthors(author)\n                          ? \"table-entry-green\"\n                          : \"table-entry-red\"\n                      }\n                    >\n                      <input\n                        type=\"checkBox\"\n                        checked={author.checked}\n                        onChange={() =>\n                          this.props.changeAuthorNameOption(author)\n                        }\n                      />\n                    </td>\n                    <td\n                      className={\n                        this.checkCorrectedAuthors(author)\n                          ? \"table-entry-green\"\n                          : \"table-entry-red\"\n                      }\n                    >\n                      {author.author}\n                    </td>\n                    <td\n                      className={\n                        this.checkCorrectedAuthors(author)\n                          ? \"table-entry-green\"\n                          : author.suggestion.length > 0\n                            ? \"table-entry-blue\"\n                            : \"table-entry-red\"\n                      }\n                    >\n                      {author.suggestion != null && author.suggestion.length > 0\n                        ? author.suggestion[0]\n                        : \"no suggestion found\"}\n                    </td>\n                    <td className=\"table-entry-grey\">{author.title}</td>\n                  </tr>\n                </tbody>\n              ))}\n            </table>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\nexport default AuthorNameCheck;\n","import React, { Component } from \"react\";\nimport Tabs from \"./Tabs\";\nimport CapitalizationCheck from \"./CapitalizationCheck\";\nimport MandatoryFieldsCheck from \"./MandatoryFieldsCheck\";\nimport AuthorNameCheck from \"./AuthorNameCheck\";\nimport * as BibtexAPI from \"./utils/BibtexAPI\";\n\nclass AnalyzeErrors extends Component {\n  downloadBibtex = bibtexContent => {\n    console.log(bibtexContent);\n    if (bibtexContent != null && bibtexContent.bibtex != null) {\n      const element = document.createElement(\"a\");\n      const file = new Blob([bibtexContent.bibtex], {\n        type: \"text/plain\"\n      });\n      element.href = URL.createObjectURL(file);\n      element.download = \"changedBibTeX.bib\";\n      document.body.appendChild(element); // Required for this to work in FireFox\n      element.click();\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"start-wrapper\">\n        <div className=\"start\">\n          <div>\n            <Tabs>\n              <div\n                label=\"Capitalization\"\n                status={\n                  !this.props.entries.some(\n                    entry => entry.capitalization === \"caseNotFound\"\n                  )\n                }\n              >\n                <CapitalizationCheck\n                  entries={this.props.entries}\n                  optionsCheckboxes={this.props.capitalizationOptions}\n                  changeOption={this.props.changeOption}\n                  changeAllOptions={this.props.changeAllOptions}\n                  changeSelectedCapitalization={\n                    this.props.changeSelectedCapitalization\n                  }\n                />\n              </div>\n              <div\n                label=\"Author name\"\n                status={\n                  this.props.entries.filter(\n                    entry =>\n                      entry.AUTHOR != null &&\n                      entry.AUTHOR.some(\n                        author => author.abbreviated || author.misspelling\n                      )\n                  ).length === 0\n                }\n              >\n                <AuthorNameCheck\n                  entries={this.props.entries}\n                  getEntriesFromServer={this.props.getEntriesFromServer}\n                  changeAuthorName={this.props.changeAuthorName}\n                  changeAuthorSuggestion={this.props.changeAuthorSuggestion}\n                  authorNameOptions={this.props.authorNameOptions}\n                  changeAuthorNameOption={this.props.changeAuthorNameOption}\n                  changeAllAuthorNameOptions={\n                    this.props.changeAllAuthorNameOptions\n                  }\n                />\n              </div>\n              <div\n                label=\"Mandatory fields\"\n                status={\n                  !this.props.entries.some(\n                    entry => entry.missingRequiredFields.length > 0\n                  )\n                }\n              >\n                <MandatoryFieldsCheck\n                  entries={this.props.entries}\n                  changeMandatoryFieldCheck={this.props.changeMandatoryFieldCheck}\n                  toggleMandatorFieldCheck={this.props.toggleMandatorFieldCheck}\n                  searchMandatoryFieldSuggestion={this.props.searchMandatoryFieldSuggestion}\n                  changeAllMandatoryFieldCheck={this.props.changeAllMandatoryFieldCheck}\n                  addMissingFields={this.props.addMissingFields}\n                  removeNotMandatoryFields={this.props.removeNotMandatoryFields}\n                />\n              </div>\n            </Tabs>\n          </div>\n          <button\n            className=\"download-button\"\n            onClick={() =>\n              BibtexAPI.getChangedBibtex().then(result =>\n                this.downloadBibtex(result)\n              )\n            }\n          >\n            Download BibTeX\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\nexport default AnalyzeErrors;\n","const getNotRequiredFields = (entryType, entryKeys) => {\n  let requiredFields = [ 'TITLE', 'AUTHOR', 'URL' ];\n  \n  if (entryType === 'ARTICLE') requiredFields = [ 'TITLE', 'AUTHOR', 'JOURNAL', 'YEAR' ];\n  if (entryType === 'BOOK') requiredFields = [ 'TITLE', 'AUTHOR', 'PUBLISHER', 'YEAR' ];\n  if (entryType === 'BOOKLET') requiredFields = [ 'TITLE' ];\n  if (entryType === 'INBOOK') requiredFields = [ 'TITLE', 'AUTHOR', 'PUBLISHER', 'YEAR', 'CHAPTER' ];\n  if (entryType === 'INCOLLECTION') requiredFields = [ 'TITLE', 'AUTHOR', 'PUBLISHER', 'YEAR', 'BOOKTITLE' ];\n  if (entryType === 'INPROCEEDINGS') requiredFields = [ 'TITLE', 'AUTHOR', 'YEAR', 'BOOKTITLE' ];\n  if (entryType === 'MANUAL') requiredFields = [ 'TITLE' ];\n  if (entryType === 'MASTERTHESIS') requiredFields = [ 'TITLE', 'AUTHOR', 'SCHOOL', 'YEAR' ];\n  if (entryType === 'PHDTHESIS') requiredFields = [ 'TITLE', 'AUTHOR', 'SCHOOL', 'YEAR' ];\n  if (entryType === 'PROCEEDINGS') requiredFields = [ 'TITLE', 'YEAR' ];\n  if (entryType === 'TECHREPORT') requiredFields = [ 'TITLE', 'AUTHOR', 'JOURNAL', 'YEAR' ];\n  if (entryType === 'UNPUBLISHED') requiredFields = [ 'TITLE', 'AUTHOR', 'NOTE' ];\n\n  const nonRequiredFields = entryKeys.filter(key => !requiredFields.includes(key))\n  return nonRequiredFields;\n};\nexport default getNotRequiredFields;","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport AppStart from \"./AppStart\";\nimport * as BibtexAPI from \"./utils/BibtexAPI\";\nimport AnalyzeErrors from \"./AnalzyeErrors\";\nimport getNotRequiredFields from \"./utils/getNotRequiredFields\";\n\nclass App extends Component {\n  state = {\n    bibtexText: \"\",\n    entries: [],\n    capitalizationOptions: [],\n    authorNameOptions: []\n  };\n\n  componentDidMount() {\n    this.setState(\n      prevState => ({\n        capitalizationOptions: prevState.entries.map(entry => ({\n          id: entry.id,\n          checked: false\n        })),\n        authorNameOptions: this.setInitialAuthorNameOptions(prevState.entries)\n      }),\n      this.getEntriesFromServer()\n    );\n  }\n\n  setInitialAuthorNameOptions = entries =>\n    entries\n      .filter(\n        entry =>\n          entry.AUTHOR != null &&\n          entry.AUTHOR.some(\n            author =>\n              author.abbreviated ||\n              author.misspelling ||\n              author.changedAbbreviation ||\n              author.changedMisspelling\n          )\n      )\n      .flatMap(entry =>\n        entry.AUTHOR.filter(\n          author =>\n            author.abbreviated ||\n            author.misspelling ||\n            author.changedAbbreviation ||\n            author.changedMisspelling\n        ).map(author => ({\n          entryId: entry.id,\n          title: entry.TITLE,\n          author: author.name,\n          suggestion: author.suggestion,\n          checked: false\n        }))\n      )\n      .sort((author1, author2) => {\n        if (author1.author < author2.author) return -1;\n        if (author1.author > author2.author) return 1;\n        return 0;\n      });\n\n  getEntriesFromServer = () => {\n    BibtexAPI.get().then(stateServer => {\n      this.loadDataFromServer(stateServer);\n    });\n  };\n\n  getSelectedEntries = () =>\n    this.state.entries.filter(entry =>\n      this.state.capitalizationOptions.find(\n        option => option.id === entry.id && option.checked\n      )\n    );\n\n  changeSelectedCapitalization = capitalizationType => {\n    this.setState(\n      prevState => {\n        const newEntries = prevState.entries.map(entry => {\n          if (\n            prevState.capitalizationOptions.some(\n              option => option.id === entry.id && option.checked\n            )\n          ) {\n            const changedEntry = Object.assign({}, entry);\n            if (capitalizationType === \"initialCase\") {\n              changedEntry.capitalization = changedEntry.initialCapitalization;\n              changedEntry.TITLE = changedEntry.correctionInitialCase;\n            } else if (capitalizationType === \"titleCase\") {\n              changedEntry.capitalization = \"titleCase\";\n              changedEntry.TITLE = changedEntry.correctionTitleCase;\n            } else if (capitalizationType === \"sentenceCase\") {\n              changedEntry.capitalization = \"sentenceCase\";\n              changedEntry.TITLE = changedEntry.correctionSentenceCase;\n            }\n            return changedEntry;\n          } else {\n            return Object.assign({}, entry);\n          }\n        });\n        return { entries: newEntries };\n      },\n      () => {\n        BibtexAPI.update({\n          entries: this.state.entries\n        });\n      }\n    );\n    this.changeAllOptions(false);\n  };\n\n  changeAllOptions = allSelected =>\n    this.setState(prevState => ({\n      capitalizationOptions: prevState.capitalizationOptions.map(option => {\n        option.checked = allSelected;\n        return option;\n      })\n    }));\n\n  changeAllAuthorNameOptions = allSelectedAuthorNameOptions =>\n    this.setState(prevState => ({\n      authorNameOptions: prevState.authorNameOptions.map(option => {\n        option.checked = allSelectedAuthorNameOptions;\n        return option;\n      })\n    }));\n\n  changeAuthorNameOption = author => {\n    this.setState(prevState => {\n      const newOptions = prevState.authorNameOptions.map(option => {\n        if (\n          option.author === author.author &&\n          option.entryId === author.entryId\n        ) {\n          const newOption = Object.assign({}, option);\n          newOption.checked = !option.checked;\n          return newOption;\n        } else {\n          return option;\n        }\n      });\n      return { authorNameOptions: newOptions };\n    });\n  };\n\n  changeOptionsCheckboxes = optionToChange =>\n    this.setState(prevState => ({\n      capitalizationOptions: prevState.capitalizationOptions\n        .filter(option => option.id !== optionToChange.id)\n        .concat([optionToChange])\n    }));\n\n  // changeMissingFieldsOption = missingFieldsOption => {\n  //   this.setState(prevState => {\n  //     const changedOptions = prevState.missingFieldsOptions.map(option => {\n  //       if (\n  //         option.entryId === missingFieldsOption.entryId &&\n  //         option.field === missingFieldsOption.field\n  //       ) {\n  //         const changedOption = Object.assign({}, missingFieldsOption);\n  //         changedOption.checked = !changedOption.checked;\n  //         return changedOption;\n  //       } else return option;\n  //     });\n  //     return { missingFieldsOptions: changedOptions };\n  //   });\n  // };\n\n  loadDataFromServer = stateServer =>\n    this.setState({\n      entries: stateServer.entries,\n      capitalizationOptions: stateServer.entries.map(entry => ({\n        id: entry.id,\n        checked: false\n      })),\n      authorNameOptions: this.setInitialAuthorNameOptions(stateServer.entries)\n    });\n\n  onSetBibtexText = textInput => {\n    const textInputObject = { bibtexText: textInput };\n    BibtexAPI.create(textInputObject).then(() =>\n      BibtexAPI.get().then(stateServer => this.loadDataFromServer(stateServer))\n    );\n  };\n\n  changeAuthorName = () => {\n    this.setState(\n      prevState => {\n        const newEnries = prevState.entries.map(entry => {\n          if (\n            entry.AUTHOR != null &&\n            this.state.authorNameOptions.some(\n              option => option.entryId === entry.id && option.checked\n            )\n          ) {\n            const newEntry = Object.assign({}, entry);\n            const newEntryAuthor = newEntry.AUTHOR.map(author => {\n              const authorOption = this.state.authorNameOptions.find(\n                option =>\n                  option.author === author.name &&\n                  option.checked &&\n                  option.entryId === entry.id\n              );\n              if (\n                authorOption != null &&\n                author.suggestion != null &&\n                author.suggestion.length > 0 &&\n                (author.abbreviated || author.misspelling)\n              ) {\n                const newAuthor = Object.assign({}, author);\n                newAuthor.name = newAuthor.suggestion[0];\n                if (author.abbreviated) {\n                  newAuthor.abbreviated = false;\n                  newAuthor.changedAbbreviation = true;\n                }\n                if (author.misspelling) {\n                  newAuthor.misspelling = false;\n                  newAuthor.changedMisspelling = true;\n                }\n                return newAuthor;\n              } else return author;\n            });\n            newEntry.AUTHOR = newEntryAuthor;\n            return newEntry;\n          } else {\n            return entry;\n          }\n        });\n        return { entries: newEnries };\n      },\n      () => {\n        this.setState(\n          prevState => ({\n            authorNameOptions: this.setInitialAuthorNameOptions(\n              prevState.entries\n            )\n          }),\n          () => {\n            BibtexAPI.update({\n              entries: this.state.entries\n            });\n          }\n        );\n      }\n    );\n  };\n\n  changeAuthorSuggestion = options => {\n    options.forEach(option => {\n      this.searchAuthorSuggestion(option.title, option.author).then(\n        foundAuthorSuggestion => {\n          if (foundAuthorSuggestion != null) {\n            this.setState(\n              prevState => {\n                const changedEntries = prevState.entries.map(entry => {\n                  if (entry.id === option.entryId) {\n                    const changedAuthors = entry.AUTHOR.map(author => {\n                      if (author.name === option.author) {\n                        const changedAuthor = Object.assign({}, author);\n                        changedAuthor.suggestion.unshift(foundAuthorSuggestion);\n                        return changedAuthor;\n                      } else return author;\n                    });\n                    entry.AUTHOR = changedAuthors;\n                    return entry;\n                  } else return entry;\n                });\n                return { entries: changedEntries };\n              },\n              () => {\n                BibtexAPI.update({\n                  entries: this.state.entries\n                });\n              }\n            );\n          }\n        }\n      );\n    });\n    this.setState(prevState => ({\n      authorNameOptions: this.setInitialAuthorNameOptions(prevState.entries)\n    }));\n  };\n\n  searchAuthorSuggestion = (title, author) => {\n    return BibtexAPI.searchAuthor(\n      title.replace(/[\\s]+/g, \"+\"),\n      author.replace(/[\\s]+/g, \"+\")\n    ).then(result => {\n      if (\n        result != null &&\n        result.message != null &&\n        result.message.items.length > 0 &&\n        result.message.items[0].author != null\n      ) {\n        const foundAuthor = result.message.items[0].author.find(itemAuthor =>\n          author.startsWith(itemAuthor.family)\n        );\n        if (foundAuthor != null) {\n          return `${foundAuthor.family}, ${foundAuthor.given}`;\n        } else return null;\n      } else return null;\n    });\n  };\n\n  searchFieldSuggestion = title =>\n    BibtexAPI.searchMissingField(title.replace(/[\\s]+/g, \"+\")).then(result => {\n      if (\n        result != null &&\n        result.message != null &&\n        result.message.items.length > 0 &&\n        result.message.items[0] != null\n      ) {\n        return result.message.items[0];\n      } else return null;\n    });\n\n  changeAllMandatoryFieldCheck = checked => {\n    const changedEntries = [...this.state.entries];\n    changedEntries.forEach((entry, index) => {\n      changedEntries[index] = { ...entry, mandatoryFieldsCheck: checked };\n    });\n    this.setState({ entries: changedEntries }, () =>\n      BibtexAPI.update({\n        entries: this.state.entries\n      })\n    );\n  };\n\n  toggleMandatorFieldCheck = id =>\n    this.changeMandatoryFieldCheck(\n      id,\n      !this.state.entries[id].mandatoryFieldsCheck\n    );\n\n  changeMandatoryFieldCheck = (id, checked) => {\n    const changedEntries = [...this.state.entries];\n    const changedEntry = {\n      ...changedEntries[id],\n      mandatoryFieldsCheck: checked\n    };\n    changedEntries[id] = changedEntry;\n    this.setState({ entries: changedEntries });\n  };\n\n  searchMandatoryFieldSuggestion = () => {\n    const changedEntries = [...this.state.entries];\n    changedEntries\n      .filter(\n        entry =>\n          entry.mandatoryFieldsCheck && entry.missingRequiredFields.length > 0\n      )\n      .forEach(entry => {\n        const changedEntry = { ...changedEntries[entry.id] };\n        this.searchFieldSuggestion(changedEntry.TITLE).then(result => {\n          if (\n            result.title.length > 0 &&\n            result.title[0].toLowerCase().startsWith(entry.TITLE.toLowerCase())\n          ) {\n            const changedMissingFields = [...entry.missingRequiredFields];\n            changedMissingFields.forEach(missingField => {\n              const missingFieldUpperCase = missingField.toUpperCase();\n              if (\n                (missingFieldUpperCase === \"BOOKTITLE\" ||\n                  missingFieldUpperCase === \"JOURNAL\") &&\n                result[\"container-title\"] != null &&\n                result[\"container-title\"].length > 0\n              ) {\n                changedEntry.mandatoryFieldsSuggestions[missingFieldUpperCase] =\n                  result[\"container-title\"][0];\n                changedEntries[entry.id] = changedEntry;\n                this.setState({ entries: changedEntries }, () =>\n                  BibtexAPI.update({\n                    entries: this.state.entries\n                  })\n                );\n              }\n              if (missingFieldUpperCase === \"YEAR\" && result.created != null) {\n                changedEntry.mandatoryFieldsSuggestions.YEAR =\n                  result.created[\"date-parts\"][0][0];\n                changedEntries[entry.id] = changedEntry;\n                this.setState({ entries: changedEntries }, () =>\n                  BibtexAPI.update({\n                    entries: this.state.entries\n                  })\n                );\n              }\n              if (\n                missingFieldUpperCase === \"AUTHOR\" &&\n                result.author != null &&\n                result.author.length > 0\n              ) {\n                const authors = result.author.map(author => ({\n                  name: `${author.family}, ${author.given}`,\n                  abbreviated: false,\n                  changedAbbreviation: false,\n                  misspelling: false,\n                  changedMisspelling: false,\n                  suggestion: []\n                }));\n                changedEntry.mandatoryFieldsSuggestions.AUTHOR = authors;\n                changedEntries[entry.id] = changedEntry;\n                this.setState({ entries: changedEntries }, () =>\n                  BibtexAPI.update({\n                    entries: this.state.entries\n                  })\n                );\n              }\n            });\n          }\n        });\n      });\n  };\n\n  addMissingFields = () => {\n    const changedEntries = [...this.state.entries];\n    changedEntries\n      .filter(\n        entry =>\n          entry.mandatoryFieldsCheck &&\n          entry.missingRequiredFields.length > 0 &&\n          Object.keys(entry.mandatoryFieldsSuggestions).length > 0\n      )\n      .forEach(entry => {\n        const changedEntry = { ...entry, ...entry.mandatoryFieldsSuggestions };\n        const suggestedFieldsKeys = Object.keys(\n          changedEntry.mandatoryFieldsSuggestions\n        );\n        let changedMissingRequiredFields = [\n          ...changedEntry.missingRequiredFields\n        ];\n        suggestedFieldsKeys.forEach(field => {\n          changedMissingRequiredFields = changedMissingRequiredFields.filter(\n            missingField => missingField !== field.toLowerCase()\n          );\n        });\n        changedEntry.missingRequiredFields = changedMissingRequiredFields;\n        changedEntries[entry.id] = changedEntry;\n      });\n    this.setState({ entries: changedEntries }, () =>\n      this.changeAllMandatoryFieldCheck(false)\n    );\n  };\n\n  removeNotMandatoryFields = () => {\n    const changedEntries = [ ...this.state.entries ];\n    changedEntries.filter(entry => entry.mandatoryFieldsCheck)\n    .forEach(entry => {\n      const changedEntry = { ...entry };\n      const entryKeys = Object.keys(changedEntry).filter(keys => keys === keys.toUpperCase());\n      const notRequiredFields = getNotRequiredFields(changedEntry.entryType, entryKeys);\n      notRequiredFields.forEach(field => {\n        delete changedEntry[field];\n      });\n      changedEntries[entry.id] = changedEntry;\n    });\n    this.setState({ entries: changedEntries }, () => this.changeAllMandatoryFieldCheck(false));\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <a className=\"App-link\" href=\"app\">\n            cleanBibteX\n          </a>\n        </header>\n        <AppStart setBibtex={this.onSetBibtexText} />\n        <AnalyzeErrors\n          entries={this.state.entries}\n          capitalizationOptions={this.state.capitalizationOptions}\n          changeOption={this.changeOptionsCheckboxes}\n          changeAllOptions={this.changeAllOptions}\n          changeSelectedCapitalization={this.changeSelectedCapitalization}\n          getEntriesFromServer={this.getEntriesFromServer}\n          changeAuthorName={this.changeAuthorName}\n          changeAuthorSuggestion={this.changeAuthorSuggestion}\n          authorNameOptions={this.state.authorNameOptions}\n          changeAuthorNameOption={this.changeAuthorNameOption}\n          changeAllAuthorNameOptions={this.changeAllAuthorNameOptions}\n          changeMandatoryFieldCheck={this.changeMandatoryFieldCheck}\n          toggleMandatorFieldCheck={this.toggleMandatorFieldCheck}\n          searchMandatoryFieldSuggestion={this.searchMandatoryFieldSuggestion}\n          changeAllMandatoryFieldCheck={this.changeAllMandatoryFieldCheck}\n          addMissingFields={this.addMissingFields}\n          removeNotMandatoryFields={this.removeNotMandatoryFields}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n//import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//serviceWorker.unregister();\n"],"sourceRoot":""}