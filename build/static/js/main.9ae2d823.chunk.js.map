{"version":3,"sources":["FileUpload.js","AppStart.js","utils/BibtexAPI.js","Tab.js","Tabs.js","CapitalizationCheck.js","MandatoryFieldsCheck.js","AuthorNameCheck.js","AnalzyeErrors.js","App.js","index.js"],"names":["readFileAsText","file","Promise","resolve","reader","FileReader","onload","event","target","result","readAsText","FileUpload","props","className","htmlFor","id","type","onChange","files","then","text","length","setBibtex","AppStart","onChangeText","setState","textInput","checkIfBibtex","state","includes","console","log","isBibtex","placeholder","value","this","bibtexText","Component","token","localStorage","headers","Accept","Authorization","get","fetch","res","json","update","body","method","JSON","stringify","create","searchAuthor","title","author","searchMissingField","Tab","onClick","label","activeTab","status","Tabs","onClickTab","tab","children","map","child","key","CapitalizationCheck","showAdvancedSettings","correctedElements","allSelected","handleButton","prevState","handleSaveSelection","options","selectAll","newAllSelectedState","changeAllOptions","handleChangeOption","optionToChange","optionsCheckboxes","find","option","checked","changeOption","changeSelected","capitalizationType","some","changeSelectedCapitalization","getCaseSum","caseSum","titleCaseSum","sentenceCaseSum","noCaseSum","entries","forEach","entry","capitalization","disabled","name","TITLE","correctionTitleCase","correctionSentenceCase","MandatoryFieldsCheck","getMissingFieldsEntries","filter","missingRequiredFields","getCorrectedAttributeEntry","entryId","field","toUpperCase","getCorrectedAttributeField","attribute","selectAllMissingFieldsOptions","getTableClassName","suggestion","changeFieldSuggestion","missingFieldsOptions","addMissingField","changeMissingFieldsOption","suggestionField","AuthorNameCheck","getInconsistentAuthorEntries","AUTHOR","abbreviated","misspelling","changedAbbreviation","changedMisspelling","getInconsistentAuthorEntriesCount","searchSuggestions","changeAuthorSuggestion","authorNameOptions","changeAllAuthorNameOptions","checkCorrectedAuthors","entryAuthor","changeAuthorName","changeAuthorNameOption","AnalyzeErrors","downloadBibtex","bibtexContent","bibtex","element","document","createElement","Blob","href","URL","createObjectURL","download","appendChild","click","capitalizationOptions","getEntriesFromServer","App","setInitialAuthorNameOptions","flatMap","sort","author1","author2","setInitialMissingFieldsOptions","correctedRequiredFields","concat","missingField","BibtexAPI","stateServer","loadDataFromServer","getSelectedEntries","changedEntry","Object","assign","initialCapitalization","correctionInitialCase","allSelectedAuthorNameOptions","newOption","changeOptionsCheckboxes","missingFieldsOption","changedOption","onSetBibtexText","newEntry","newEntryAuthor","newAuthor","searchAuthorSuggestion","foundAuthorSuggestion","changedAuthors","changedAuthor","unshift","replace","message","items","foundAuthor","itemAuthor","startsWith","family","given","searchFieldSuggestion","toLowerCase","addSuggestion","created","authors","attributeName","attributeValues","attributeValue","push","newAttribute","removCheckOptions","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.9ae2d823.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst readFileAsText = file =>\r\n  new Promise(resolve => {\r\n    const reader = new FileReader();\r\n    reader.onload = event => {\r\n      resolve(event.target.result);\r\n    };\r\n    reader.readAsText(file);\r\n  });\r\n\r\nfunction FileUpload(props) {\r\n  const handleFileChange = event => {\r\n    const file = event.target.files[0];\r\n    if (file) {\r\n      readFileAsText(file).then(text => {\r\n        if (text.length > 3) {\r\n          // console.log(text);\r\n          props.setBibtex(text);\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"start-upload-button\">\r\n      <label htmlFor=\"file\">\r\n        <br />\r\n        <br />\r\n        <br />\r\n        Upload BibteX\r\n      </label>\r\n      <input\r\n        id=\"file\"\r\n        className=\"input-file\"\r\n        type=\"file\"\r\n        onChange={handleFileChange}\r\n      />\r\n    </div>\r\n  );\r\n}\r\nexport default FileUpload;\r\n","import React, { Component } from \"react\";\r\nimport FileUpload from \"./FileUpload\";\r\n\r\nclass AppStart extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      isBibtex: false,\r\n      textInput: \"\"\r\n    };\r\n  }\r\n\r\n  onChangeText = text => {\r\n    this.setState({ textInput: text }, () => this.checkIfBibtex());\r\n  };\r\n\r\n  checkIfBibtex = () => {\r\n    if (\r\n      this.state.textInput.length > 30 &&\r\n      this.state.textInput.includes(\"@\")\r\n    ) {\r\n      console.log(\"is probably bibtex, will send to server\");\r\n      this.props.setBibtex(this.state.textInput);\r\n    } else {\r\n      console.log(\"is not a bibtex, not sending to server\");\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"start-wrapper\">\r\n        <div className=\"start\">\r\n          <div className=\"start-inputs\">\r\n            <textarea\r\n              className=\"start-input-field\"\r\n              type=\"text\"\r\n              placeholder=\"Paste your BibTeX file here\"\r\n              value={this.state.bibtexText}\r\n              onChange={event => this.onChangeText(event.target.value)}\r\n            />\r\n            <FileUpload setBibtex={this.props.setBibtex} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default AppStart;\r\n","// const api = \"http://127.0.0.1:5000\";\r\nconst crossrefApi = 'https://api.crossref.org';\r\n\r\nlet token = localStorage.token;\r\n\r\nif (!token) {\r\n  token = localStorage.token = 123;\r\n}\r\nconst headers = {\r\n  Accept: \"application/json\",\r\n  Authorization: token\r\n};\r\n\r\nexport const get = () =>\r\n  fetch(`/bibtex`, { headers })\r\n    .then(res => res.json());\r\n\r\nexport const update = body =>\r\n  fetch(`/update`, {\r\n  method: \"POST\",\r\n  headers: {\r\n    ...headers,\r\n    \"Content-Type\": \"application/json\"\r\n  },\r\n  body: JSON.stringify(body)\r\n}).then(res => res);\r\n\r\nexport const create = body =>\r\n  fetch(`/bibtex`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      ...headers,\r\n      \"Content-Type\": \"application/json\"\r\n    },\r\n    body: JSON.stringify(body)\r\n  }).then(res => res.json());\r\n\r\nexport const getChangedBibtex = () =>\r\n  fetch(`/changedBibtex`, {headers})\r\n    .then(res => res.json());\r\n\r\nexport const searchAuthor = (title, author) =>\r\n  fetch(`${crossrefApi}/works?query.bibliographic=${title}&query.author=${author}&rows=1`)\r\n    .then(res => res.json());\r\n\r\nexport const searchMissingField = title =>\r\n  fetch(`${crossrefApi}/works?query.bibliographic=${title}&rows=1`)\r\n      .then(res => res.json());\r\n","import React, { Component } from \"react\";\r\n\r\n// import PropTypes from 'prop-types';\r\n\r\nclass Tab extends Component {\r\n  onClick = () => {\r\n    const { label, onClick } = this.props;\r\n    onClick(label);\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      onClick,\r\n      props: { activeTab, label, status }\r\n    } = this;\r\n\r\n    let className = \"tab-list-item\";\r\n\r\n    if (activeTab === label) {\r\n      className += \" tab-list-active\";\r\n    }\r\n\r\n    return (\r\n      <li className={className} onClick={onClick}>\r\n        {`${label} - ${status ? 'ok' : 'inconsistencies found'}`}\r\n      </li>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Tab;\r\n","import React, { Component } from \"react\";\r\nimport Tab from \"./Tab\";\r\n\r\nclass Tabs extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      activeTab: this.props.children[0].props.label,\r\n    };\r\n  }\r\n\r\n  onClickTab = tab => this.setState({ activeTab: tab });\r\n\r\n  render() {\r\n    const {\r\n      onClickTab,\r\n      props: { children },\r\n      state: { activeTab }\r\n    } = this;\r\n\r\n    return (\r\n      <div className=\"tabs\">\r\n        <ol className=\"tab-list\">\r\n          {children.map(child => {\r\n            const { label, status } = child.props;\r\n            return (\r\n              <Tab\r\n                activeTab={activeTab}\r\n                key={label}\r\n                label={label}\r\n                onClick={onClickTab}\r\n                status={status}\r\n              />\r\n            );\r\n          })}\r\n        </ol>\r\n        <div className=\"tab-content\">\r\n          {children.map(child => {\r\n            if (child.props.label !== activeTab) {\r\n              return undefined;\r\n            }\r\n            return child.props.children;\r\n          })}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Tabs;\r\n","import React, { Component } from \"react\";\r\n\r\nclass CapitalizationCheck extends Component {\r\n  state = {\r\n    showAdvancedSettings: false,\r\n    correctedElements: [],\r\n    allSelected: false\r\n  };\r\n\r\n  handleButton = () => {\r\n    this.setState(prevState => ({\r\n      showAdvancedSettings: !prevState.showAdvancedSettings\r\n    }));\r\n  };\r\n\r\n  handleSaveSelection = () => {\r\n    console.log(this.props.options);\r\n  };\r\n\r\n  selectAll = () => {\r\n    const newAllSelectedState = !this.state.allSelected;\r\n    this.setState({\r\n      allSelected: newAllSelectedState\r\n    });\r\n    this.props.changeAllOptions(newAllSelectedState);\r\n  };\r\n\r\n  handleChangeOption = id => {\r\n    const optionToChange = this.props.optionsCheckboxes.find(\r\n      option => option.id === id\r\n    );\r\n    optionToChange.checked = !optionToChange.checked;\r\n\r\n    this.props.changeOption(optionToChange);\r\n  };\r\n\r\n  changeSelected = capitalizationType => {\r\n    if (\r\n      this.props.optionsCheckboxes.some(option => option.checked) ||\r\n      this.state.allSelected\r\n    ) {\r\n      this.props.changeSelectedCapitalization(capitalizationType);\r\n      this.setState({\r\n        allSelected: false\r\n      });\r\n    }\r\n  };\r\n\r\n  getCaseSum = () => {\r\n    const caseSum = {\r\n      titleCaseSum: 0,\r\n      sentenceCaseSum: 0,\r\n      noCaseSum: 0\r\n    };\r\n    this.props.entries.forEach(entry => {\r\n      if (entry.capitalization === \"titleCase\") caseSum.titleCaseSum++;\r\n      else if (entry.capitalization === \"sentenceCase\")\r\n        caseSum.sentenceCaseSum++;\r\n      else caseSum.noCaseSum++;\r\n    });\r\n    return caseSum;\r\n  };\r\n\r\n  render() {\r\n    const { entries, optionsCheckboxes } = this.props;\r\n\r\n    return (\r\n      <div>\r\n        <div className=\"statistic\">\r\n          <h3>Summary</h3>\r\n          <ul>\r\n            <li>{entries.length} Entries found</li>\r\n            {this.getCaseSum().titleCaseSum > 0 && (\r\n              <li>{this.getCaseSum().titleCaseSum} Title case entries found</li>\r\n            )}\r\n            {this.getCaseSum().sentenceCaseSum > 0 && (\r\n              <li>\r\n                {this.getCaseSum().sentenceCaseSum} Sentence case entries found\r\n              </li>\r\n            )}\r\n            {this.getCaseSum().noCaseSum > 0 && (\r\n              <li>{this.getCaseSum().noCaseSum} without known case found</li>\r\n            )}\r\n          </ul>\r\n\r\n          <button\r\n            className=\"btn-toggle-advanced\"\r\n            onClick={event => this.handleButton(event)}\r\n          >\r\n            Correct errors\r\n          </button>\r\n        </div>\r\n\r\n        {this.state.showAdvancedSettings && entries.length > 0 && (\r\n          <div className=\"corrections-table\">\r\n            <button\r\n              className=\"btn-select-all\"\r\n              disabled={!optionsCheckboxes.some(option => option.checked)}\r\n              onClick={() => this.changeSelected(\"titleCase\")}\r\n            >\r\n              Set selected to title case\r\n            </button>\r\n            <button\r\n              className=\"btn-select-all\"\r\n              disabled={!optionsCheckboxes.some(option => option.checked)}\r\n              onClick={() => this.changeSelected(\"sentenceCase\")}\r\n            >\r\n              Set selected to sentence case\r\n            </button>\r\n            <button\r\n              className=\"btn-select-all\"\r\n              disabled={!optionsCheckboxes.some(option => option.checked)}\r\n              onClick={() => this.changeSelected(\"initialCase\")}\r\n            >\r\n              Set selected to initial case\r\n            </button>\r\n            <table>\r\n              <tbody>\r\n                <tr>\r\n                  <th>\r\n                    <input\r\n                      type=\"checkBox\"\r\n                      name=\"select-all-checkbox\"\r\n                      checked={this.state.allSelected}\r\n                      onChange={() => this.selectAll()}\r\n                    />\r\n                  </th>\r\n                  <th>\r\n                    Current\r\n                  </th>\r\n                  <th>Title case</th>\r\n                  <th>Sentence case</th>\r\n                </tr>\r\n              </tbody>\r\n              {entries.map(entry => (\r\n                <tbody key={entry.id}>\r\n                  <tr>\r\n                    <td\r\n                      className={\r\n                        entry.capitalization === \"titleCase\"\r\n                          ? \"table-entry-green\"\r\n                          : entry.capitalization === \"sentenceCase\"\r\n                            ? \"table-entry-blue\"\r\n                            : \"table-entry-red\"\r\n                      }\r\n                    >\r\n                      <input\r\n                        id={entry.id}\r\n                        type=\"checkBox\"\r\n                        checked={\r\n                          optionsCheckboxes.find(\r\n                            option => option.id === entry.id\r\n                          ).checked\r\n                        }\r\n                        onChange={() => this.handleChangeOption(entry.id)}\r\n                      />\r\n                    </td>\r\n                    <td\r\n                      className={\r\n                        entry.capitalization === \"titleCase\"\r\n                          ? \"table-entry-green\"\r\n                          : entry.capitalization === \"sentenceCase\"\r\n                            ? \"table-entry-blue\"\r\n                            : \"table-entry-red\"\r\n                      }\r\n                    >\r\n                      {entry.TITLE}\r\n                    </td>\r\n                    <td className=\"table-entry-green\">\r\n                      {entry.correctionTitleCase}\r\n                    </td>\r\n                    <td className=\"table-entry-blue\">\r\n                      {entry.correctionSentenceCase}\r\n                    </td>\r\n                  </tr>\r\n                </tbody>\r\n              ))}\r\n            </table>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default CapitalizationCheck;\r\n","import React, { Component } from \"react\";\r\n\r\nclass MandatoryFieldsCheck extends Component {\r\n  state = {\r\n    allSelected: false\r\n  };\r\n\r\n  getMissingFieldsEntries = () =>\r\n    this.props.entries.filter(entry => entry.missingRequiredFields.length > 0)\r\n      .length;\r\n\r\n  getCorrectedAttributeEntry = option =>\r\n    this.props.entries\r\n      .filter(entry => entry.id === option.entryId)\r\n      .find(entry => entry[option.field.toUpperCase()]);\r\n\r\n  getCorrectedAttributeField = option => {\r\n    const entry = this.getCorrectedAttributeEntry(option);\r\n    if (entry != null) {\r\n      const field = entry[option.field.toUpperCase()];\r\n      if (option.field === \"author\" && field.length > 0) {\r\n        return field.map(attribute => <div key={attribute}>{attribute}</div>);\r\n      } else {\r\n        return field;\r\n      }\r\n    } else {\r\n      return \"-\";\r\n    }\r\n  };\r\n\r\n  selectAll = () => {\r\n    const newAllSelectedState = !this.state.allSelected;\r\n    this.setState(prevState => ({\r\n      allSelected: newAllSelectedState\r\n    }));\r\n    this.props.selectAllMissingFieldsOptions(newAllSelectedState);\r\n  };\r\n\r\n  getTableClassName = option =>\r\n    this.getCorrectedAttributeEntry(option) != null\r\n      ? \"table-entry-green\"\r\n      : option.suggestion.length > 0\r\n        ? \"table-entry-blue\"\r\n        : \"table-entry-red\";\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"statistic\">\r\n          <h3>Summary</h3>\r\n          <ul>\r\n            <li>{this.props.entries.length} entries found</li>\r\n            <li>\r\n              {this.getMissingFieldsEntries()} entries with missing required\r\n              fields found\r\n            </li>\r\n          </ul>\r\n        </div>\r\n        {this.getMissingFieldsEntries() > 0 && (\r\n          <div className=\"corrections-table\">\r\n            <button\r\n              onClick={() => this.props.changeFieldSuggestion()}\r\n              disabled={!this.props.missingFieldsOptions.some(option => option.checked)}\r\n            >\r\n              Search suggestion online\r\n            </button>\r\n            <button\r\n              disabled={!this.props.missingFieldsOptions.some(option => option.checked)}\r\n              onClick={() => {\r\n                this.setState({ allSelected: false });\r\n                this.props.addMissingField();\r\n              }}\r\n            >\r\n              Add suggestion to field\r\n            </button>\r\n            <table>\r\n              <tbody>\r\n                <tr>\r\n                  <th>\r\n                    <input\r\n                      type=\"checkBox\"\r\n                      name=\"select-all-missing-fields-checkbox\"\r\n                      checked={this.state.allSelected}\r\n                      onChange={() => this.selectAll()}\r\n                    />\r\n                  </th>\r\n                  <th>\r\n                    Missing field name\r\n                  </th>\r\n                  <th>Added field</th>\r\n                  <th>Suggestion</th>\r\n                  <th>Title</th>\r\n                </tr>\r\n              </tbody>\r\n              {this.props.missingFieldsOptions.map(option => (\r\n                <tbody key={`${option.entryId}+${option.field}`}>\r\n                  <tr>\r\n                    <td className={this.getTableClassName(option)}>\r\n                      <input\r\n                        type=\"checkbox\"\r\n                        checked={option.checked}\r\n                        onChange={() =>\r\n                          this.props.changeMissingFieldsOption(option)\r\n                        }\r\n                      />\r\n                    </td>\r\n                    <td className={this.getTableClassName(option)}>\r\n                      <span>{option.field}</span>\r\n                    </td>\r\n                    <td className={this.getTableClassName(option)}>\r\n                      {this.getCorrectedAttributeField(option)}\r\n                    </td>\r\n                    <td className={this.getTableClassName(option)}>\r\n                      {option.suggestion.length > 0\r\n                        ? option.suggestion.map(suggestionField => (\r\n                          <div key={suggestionField}>{suggestionField}</div>\r\n                        ))\r\n                        : \"-\"}\r\n                    </td>\r\n                    <td className={this.getTableClassName(option)}>\r\n                      {\r\n                        this.props.entries.find(\r\n                          entry => entry.id === option.entryId\r\n                        ).TITLE\r\n                      }\r\n                    </td>\r\n                  </tr>\r\n                </tbody>\r\n              ))}\r\n            </table>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default MandatoryFieldsCheck;\r\n","import React, { Component } from \"react\";\r\n\r\nclass AuthorNameCheck extends Component {\r\n  state = {\r\n    allSelected: false\r\n  };\r\n\r\n  getInconsistentAuthorEntries = () =>\r\n    this.props.entries.filter(\r\n      entry =>\r\n        entry.AUTHOR != null &&\r\n        entry.AUTHOR.some(\r\n          author =>\r\n            author.abbreviated ||\r\n            author.misspelling ||\r\n            author.changedAbbreviation ||\r\n            author.changedMisspelling\r\n        )\r\n    );\r\n\r\n  getInconsistentAuthorEntriesCount = () =>\r\n    this.props.entries.filter(\r\n      entry =>\r\n        entry.AUTHOR != null &&\r\n        entry.AUTHOR.some(author => author.abbreviated || author.misspelling)\r\n    );\r\n\r\n  searchSuggestions = () => {\r\n    this.props.changeAuthorSuggestion(\r\n      this.props.authorNameOptions.filter(option => option.checked)\r\n    );\r\n  };\r\n\r\n  selectAll = () => {\r\n    const newAllSelectedState = !this.state.allSelected;\r\n    this.setState({ allSelected: newAllSelectedState });\r\n    this.props.changeAllAuthorNameOptions(newAllSelectedState);\r\n  };\r\n\r\n  checkCorrectedAuthors = option =>\r\n    this.props.entries.some(\r\n      entry =>\r\n        entry.id === option.entryId &&\r\n        entry.AUTHOR.some(\r\n          entryAuthor =>\r\n            option.author === entryAuthor.name &&\r\n            !entryAuthor.abbreviated &&\r\n            !entryAuthor.misspelling\r\n        )\r\n    );\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"statistic\">\r\n          <h3>Summary</h3>\r\n          <ul>\r\n            <li>{this.props.entries.length} entries found</li>\r\n            <li>\r\n              {this.getInconsistentAuthorEntriesCount().length} entries with\r\n              inconsistent author names found\r\n            </li>\r\n          </ul>\r\n        </div>\r\n        {this.getInconsistentAuthorEntries().length > 0 && (\r\n          <div className=\"corrections-table\">\r\n            <button\r\n              onClick={() =>\r\n                this.setState({ allSelected: false }, this.searchSuggestions())\r\n              }\r\n              disabled={!this.props.authorNameOptions.some(option => option.checked)}\r\n            >\r\n              Search author suggestion\r\n            </button>\r\n            <button\r\n              onClick={() =>\r\n                this.setState(\r\n                  { allSelected: false },\r\n                  this.props.changeAuthorName()\r\n                )\r\n              }\r\n              disabled={!this.props.authorNameOptions.some(option => option.checked)}\r\n            >\r\n              change author name to suggestion\r\n            </button>\r\n            <table>\r\n              <tbody>\r\n                <tr>\r\n                  <th>\r\n                    <input\r\n                      type=\"checkBox\"\r\n                      name=\"select-all-author-name-checkbox\"\r\n                      checked={this.state.allSelected}\r\n                      onChange={() => this.selectAll()}\r\n                    />\r\n                  </th>\r\n                  <th>\r\n                    Current Author Name\r\n                  </th>\r\n                  <th>Author Name Suggestion</th>\r\n                  <th>Entry Title</th>\r\n                </tr>\r\n              </tbody>\r\n              {this.props.authorNameOptions.map(author => (\r\n                <tbody key={`${author.entryId}+${author.author}`}>\r\n                  <tr>\r\n                    <td\r\n                      className={\r\n                        this.checkCorrectedAuthors(author)\r\n                          ? \"table-entry-green\"\r\n                          : \"table-entry-red\"\r\n                      }\r\n                    >\r\n                      <input\r\n                        type=\"checkBox\"\r\n                        checked={author.checked}\r\n                        onChange={() =>\r\n                          this.props.changeAuthorNameOption(author)\r\n                        }\r\n                      />\r\n                    </td>\r\n                    <td\r\n                      className={\r\n                        this.checkCorrectedAuthors(author)\r\n                          ? \"table-entry-green\"\r\n                          : \"table-entry-red\"\r\n                      }\r\n                    >\r\n                      {author.author}\r\n                    </td>\r\n                    <td\r\n                      className={\r\n                        this.checkCorrectedAuthors(author)\r\n                          ? \"table-entry-green\"\r\n                          : author.suggestion.length > 0\r\n                            ? \"table-entry-blue\"\r\n                            : \"table-entry-red\"\r\n                      }\r\n                    >\r\n                      {author.suggestion != null && author.suggestion.length > 0\r\n                        ? author.suggestion[0]\r\n                        : \"no suggestion found\"}\r\n                    </td>\r\n                    <td className=\"table-entry-grey\">{author.title}</td>\r\n                  </tr>\r\n                </tbody>\r\n              ))}\r\n            </table>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default AuthorNameCheck;\r\n","import React, { Component } from \"react\";\r\nimport Tabs from \"./Tabs\";\r\nimport CapitalizationCheck from \"./CapitalizationCheck\";\r\nimport MandatoryFieldsCheck from \"./MandatoryFieldsCheck\";\r\nimport AuthorNameCheck from \"./AuthorNameCheck\";\r\nimport * as BibtexAPI from \"./utils/BibtexAPI\";\r\n\r\nclass AnalyzeErrors extends Component {\r\n  downloadBibtex = bibtexContent => {\r\n    console.log(bibtexContent);\r\n    if (bibtexContent != null && bibtexContent.bibtex != null) {\r\n      const element = document.createElement(\"a\");\r\n      const file = new Blob([bibtexContent.bibtex], {\r\n        type: \"text/plain\"\r\n      });\r\n      element.href = URL.createObjectURL(file);\r\n      element.download = \"changedBibTeX.bib\";\r\n      document.body.appendChild(element); // Required for this to work in FireFox\r\n      element.click();\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"start-wrapper\">\r\n        <div className=\"start\">\r\n          <div>\r\n            <Tabs>\r\n              <div\r\n                label=\"Capitalization\"\r\n                status={\r\n                  !this.props.entries.some(\r\n                    entry => entry.capitalization === \"caseNotFound\"\r\n                  )\r\n                }\r\n              >\r\n                <CapitalizationCheck\r\n                  entries={this.props.entries}\r\n                  optionsCheckboxes={this.props.capitalizationOptions}\r\n                  changeOption={this.props.changeOption}\r\n                  changeAllOptions={this.props.changeAllOptions}\r\n                  changeSelectedCapitalization={\r\n                    this.props.changeSelectedCapitalization\r\n                  }\r\n                />\r\n              </div>\r\n              <div\r\n                label=\"Author name\"\r\n                status={\r\n                  this.props.entries.filter(\r\n                    entry =>\r\n                      entry.AUTHOR != null &&\r\n                      entry.AUTHOR.some(\r\n                        author => author.abbreviated || author.misspelling\r\n                      )\r\n                  ).length === 0\r\n                }\r\n              >\r\n                <AuthorNameCheck\r\n                  entries={this.props.entries}\r\n                  getEntriesFromServer={this.props.getEntriesFromServer}\r\n                  changeAuthorName={this.props.changeAuthorName}\r\n                  changeAuthorSuggestion={this.props.changeAuthorSuggestion}\r\n                  authorNameOptions={this.props.authorNameOptions}\r\n                  changeAuthorNameOption={this.props.changeAuthorNameOption}\r\n                  changeAllAuthorNameOptions={\r\n                    this.props.changeAllAuthorNameOptions\r\n                  }\r\n                />\r\n              </div>\r\n              <div\r\n                label=\"Mandatory fields\"\r\n                status={\r\n                  !this.props.entries.some(\r\n                    entry => entry.missingRequiredFields.length > 0\r\n                  )\r\n                }\r\n              >\r\n                <MandatoryFieldsCheck\r\n                  entries={this.props.entries}\r\n                  missingFieldsOptions={this.props.missingFieldsOptions}\r\n                  changeMissingFieldsOption={\r\n                    this.props.changeMissingFieldsOption\r\n                  }\r\n                  changeFieldSuggestion={this.props.changeFieldSuggestion}\r\n                  addMissingField={this.props.addMissingField}\r\n                  selectAllMissingFieldsOptions={\r\n                    this.props.selectAllMissingFieldsOptions\r\n                  }\r\n                />\r\n              </div>\r\n            </Tabs>\r\n          </div>\r\n          <button\r\n            className=\"download-button\"\r\n            onClick={() =>\r\n              BibtexAPI.getChangedBibtex().then(result =>\r\n                this.downloadBibtex(result)\r\n              )\r\n            }\r\n          >\r\n            Download BibTeX\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default AnalyzeErrors;\r\n","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport AppStart from \"./AppStart\";\r\nimport * as BibtexAPI from \"./utils/BibtexAPI\";\r\nimport AnalyzeErrors from \"./AnalzyeErrors\";\r\n\r\nclass App extends Component {\r\n  state = {\r\n    bibtexText: \"\",\r\n    entries: [],\r\n    capitalizationOptions: [],\r\n    authorNameOptions: [],\r\n    missingFieldsOptions: []\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.setState(\r\n      prevState => ({\r\n        capitalizationOptions: prevState.entries.map(entry => ({\r\n          id: entry.id,\r\n          checked: false\r\n        })),\r\n        authorNameOptions: this.setInitialAuthorNameOptions(prevState.entries),\r\n        missingFieldsOptions: this.setInitialMissingFieldsOptions(\r\n          prevState.entries\r\n        )\r\n      }),\r\n      this.getEntriesFromServer()\r\n    );\r\n  }\r\n\r\n  setInitialAuthorNameOptions = entries =>\r\n    entries\r\n      .filter(\r\n        entry =>\r\n          entry.AUTHOR != null &&\r\n          entry.AUTHOR.some(\r\n            author =>\r\n              author.abbreviated ||\r\n              author.misspelling ||\r\n              author.changedAbbreviation ||\r\n              author.changedMisspelling\r\n          )\r\n      )\r\n      .flatMap(entry =>\r\n        entry.AUTHOR.filter(\r\n          author =>\r\n            author.abbreviated ||\r\n            author.misspelling ||\r\n            author.changedAbbreviation ||\r\n            author.changedMisspelling\r\n        ).map(author => ({\r\n          entryId: entry.id,\r\n          title: entry.TITLE,\r\n          author: author.name,\r\n          suggestion: author.suggestion,\r\n          checked: false\r\n        }))\r\n      )\r\n      .sort((author1, author2) => {\r\n        if (author1.author < author2.author) return -1;\r\n        if (author1.author > author2.author) return 1;\r\n        return 0;\r\n      });\r\n\r\n  setInitialMissingFieldsOptions = entries =>\r\n    entries\r\n      .filter(\r\n        entry =>\r\n          entry.missingRequiredFields.length > 0 ||\r\n          entry.correctedRequiredFields.length > 0\r\n      )\r\n      .flatMap(entry =>\r\n        entry.missingRequiredFields\r\n          .concat(entry.correctedRequiredFields)\r\n          .map(missingField => ({\r\n            entryId: entry.id,\r\n            title: entry.TITLE,\r\n            field: missingField,\r\n            suggestion: [],\r\n            checked: false\r\n          }))\r\n      );\r\n\r\n  getEntriesFromServer = () => {\r\n    BibtexAPI.get().then(stateServer => {\r\n      this.loadDataFromServer(stateServer);\r\n    });\r\n  };\r\n\r\n  getSelectedEntries = () =>\r\n    this.state.entries.filter(entry =>\r\n      this.state.capitalizationOptions.find(\r\n        option => option.id === entry.id && option.checked\r\n      )\r\n    );\r\n\r\n  changeSelectedCapitalization = capitalizationType => {\r\n    this.setState(\r\n      prevState => {\r\n        const newEntries = prevState.entries.map(entry => {\r\n          if (\r\n            prevState.capitalizationOptions.some(\r\n              option => option.id === entry.id && option.checked\r\n            )\r\n          ) {\r\n            const changedEntry = Object.assign({}, entry);\r\n            if (capitalizationType === \"initialCase\") {\r\n              changedEntry.capitalization = changedEntry.initialCapitalization;\r\n              changedEntry.TITLE = changedEntry.correctionInitialCase;\r\n            } else if (capitalizationType === \"titleCase\") {\r\n              changedEntry.capitalization = \"titleCase\";\r\n              changedEntry.TITLE = changedEntry.correctionTitleCase;\r\n            } else if (capitalizationType === \"sentenceCase\") {\r\n              changedEntry.capitalization = \"sentenceCase\";\r\n              changedEntry.TITLE = changedEntry.correctionSentenceCase;\r\n            }\r\n            return changedEntry;\r\n          } else {\r\n            return Object.assign({}, entry);\r\n          }\r\n        });\r\n        return { entries: newEntries };\r\n      },\r\n      () => {\r\n        BibtexAPI.update({\r\n          entries: this.state.entries\r\n        });\r\n      }\r\n    );\r\n    this.changeAllOptions(false);\r\n  };\r\n\r\n  changeAllOptions = allSelected =>\r\n    this.setState(prevState => ({\r\n      capitalizationOptions: prevState.capitalizationOptions.map(option => {\r\n        option.checked = allSelected;\r\n        return option;\r\n      })\r\n    }));\r\n\r\n  changeAllAuthorNameOptions = allSelectedAuthorNameOptions =>\r\n    this.setState(prevState => ({\r\n      authorNameOptions: prevState.authorNameOptions.map(option => {\r\n        option.checked = allSelectedAuthorNameOptions;\r\n        return option;\r\n      })\r\n    }));\r\n\r\n  changeAuthorNameOption = author => {\r\n    this.setState(prevState => {\r\n      const newOptions = prevState.authorNameOptions.map(option => {\r\n        if (\r\n          option.author === author.author &&\r\n          option.entryId === author.entryId\r\n        ) {\r\n          const newOption = Object.assign({}, option);\r\n          newOption.checked = !option.checked;\r\n          return newOption;\r\n        } else {\r\n          return option;\r\n        }\r\n      });\r\n      return { authorNameOptions: newOptions };\r\n    });\r\n  };\r\n\r\n  changeOptionsCheckboxes = optionToChange =>\r\n    this.setState(prevState => ({\r\n      capitalizationOptions: prevState.capitalizationOptions\r\n        .filter(option => option.id !== optionToChange.id)\r\n        .concat([optionToChange])\r\n    }));\r\n\r\n  changeMissingFieldsOption = missingFieldsOption => {\r\n    this.setState(prevState => {\r\n      const changedOptions = prevState.missingFieldsOptions.map(option => {\r\n        if (\r\n          option.entryId === missingFieldsOption.entryId &&\r\n          option.field === missingFieldsOption.field\r\n        ) {\r\n          const changedOption = Object.assign({}, missingFieldsOption);\r\n          changedOption.checked = !changedOption.checked;\r\n          return changedOption;\r\n        } else return option;\r\n      });\r\n      return { missingFieldsOptions: changedOptions };\r\n    });\r\n  };\r\n\r\n  loadDataFromServer = stateServer =>\r\n    this.setState({\r\n      entries: stateServer.entries,\r\n      capitalizationOptions: stateServer.entries.map(entry => ({\r\n        id: entry.id,\r\n        checked: false\r\n      })),\r\n      authorNameOptions: this.setInitialAuthorNameOptions(stateServer.entries),\r\n      missingFieldsOptions: this.setInitialMissingFieldsOptions(\r\n        stateServer.entries\r\n      )\r\n    });\r\n\r\n  onSetBibtexText = textInput => {\r\n    const textInputObject = { bibtexText: textInput };\r\n    BibtexAPI.create(textInputObject).then(() =>\r\n      BibtexAPI.get().then(stateServer => this.loadDataFromServer(stateServer))\r\n    );\r\n  };\r\n\r\n  changeAuthorName = () => {\r\n    this.setState(\r\n      prevState => {\r\n        const newEnries = prevState.entries.map(entry => {\r\n          if (\r\n            entry.AUTHOR != null &&\r\n            this.state.authorNameOptions.some(\r\n              option => option.entryId === entry.id && option.checked\r\n            )\r\n          ) {\r\n            const newEntry = Object.assign({}, entry);\r\n            const newEntryAuthor = newEntry.AUTHOR.map(author => {\r\n              const authorOption = this.state.authorNameOptions.find(\r\n                option =>\r\n                  option.author === author.name &&\r\n                  option.checked &&\r\n                  option.entryId === entry.id\r\n              );\r\n              if (\r\n                authorOption != null &&\r\n                author.suggestion != null &&\r\n                author.suggestion.length > 0 &&\r\n                (author.abbreviated || author.misspelling)\r\n              ) {\r\n                const newAuthor = Object.assign({}, author);\r\n                newAuthor.name = newAuthor.suggestion[0];\r\n                if (author.abbreviated) {\r\n                  newAuthor.abbreviated = false;\r\n                  newAuthor.changedAbbreviation = true;\r\n                }\r\n                if (author.misspelling) {\r\n                  newAuthor.misspelling = false;\r\n                  newAuthor.changedMisspelling = true;\r\n                }\r\n                return newAuthor;\r\n              } else return author;\r\n            });\r\n            newEntry.AUTHOR = newEntryAuthor;\r\n            return newEntry;\r\n          } else {\r\n            return entry;\r\n          }\r\n        });\r\n        return { entries: newEnries };\r\n      },\r\n      () => {\r\n        this.setState(\r\n          prevState => ({\r\n            authorNameOptions: this.setInitialAuthorNameOptions(\r\n              prevState.entries\r\n            )\r\n          }),\r\n          () => {\r\n            BibtexAPI.update({\r\n              entries: this.state.entries\r\n            });\r\n          }\r\n        );\r\n      }\r\n    );\r\n  };\r\n\r\n  changeAuthorSuggestion = options => {\r\n    options.forEach(option => {\r\n      this.searchAuthorSuggestion(option.title, option.author).then(\r\n        foundAuthorSuggestion => {\r\n          console.log(foundAuthorSuggestion);\r\n          if (foundAuthorSuggestion != null) {\r\n            this.setState(\r\n              prevState => {\r\n                const changedEntries = prevState.entries.map(entry => {\r\n                  if (entry.id === option.entryId) {\r\n                    const changedAuthors = entry.AUTHOR.map(author => {\r\n                      if (author.name === option.author) {\r\n                        const changedAuthor = Object.assign({}, author);\r\n                        changedAuthor.suggestion.unshift(foundAuthorSuggestion);\r\n                        console.log(changedAuthor);\r\n                        return changedAuthor;\r\n                      } else return author;\r\n                    });\r\n                    entry.AUTHOR = changedAuthors;\r\n                    return entry;\r\n                  } else return entry;\r\n                });\r\n                return { entries: changedEntries };\r\n              },\r\n              () => {\r\n                BibtexAPI.update({\r\n                  entries: this.state.entries\r\n                });\r\n              }\r\n            );\r\n          }\r\n        }\r\n      );\r\n    });\r\n    this.setState(prevState => ({\r\n      authorNameOptions: this.setInitialAuthorNameOptions(prevState.entries)\r\n    }));\r\n  };\r\n\r\n  searchAuthorSuggestion = (title, author) => {\r\n    return BibtexAPI.searchAuthor(\r\n      title.replace(/[\\s]+/g, \"+\"),\r\n      author.replace(/[\\s]+/g, \"+\")\r\n    ).then(result => {\r\n      if (\r\n        result != null &&\r\n        result.message != null &&\r\n        result.message.items.length > 0 &&\r\n        result.message.items[0].author != null\r\n      ) {\r\n        const foundAuthor = result.message.items[0].author.find(itemAuthor =>\r\n          author.startsWith(itemAuthor.family)\r\n        );\r\n        if (foundAuthor != null) {\r\n          // console.log(foundAuthor);\r\n          return `${foundAuthor.family}, ${foundAuthor.given}`;\r\n        } else return null;\r\n      } else return null;\r\n    });\r\n  };\r\n\r\n  changeFieldSuggestion = () => {\r\n    this.state.entries\r\n      .filter(entry =>\r\n        this.state.missingFieldsOptions.some(\r\n          option => option.entryId === entry.id && option.checked\r\n        )\r\n      )\r\n      .forEach(entry =>\r\n        this.searchFieldSuggestion(entry.TITLE).then(result => {\r\n          if (\r\n            result.title.length > 0 &&\r\n            result.title[0].toLowerCase().startsWith(entry.TITLE.toLowerCase())\r\n          ) {\r\n            console.log(\"title is the same\");\r\n            this.state.missingFieldsOptions\r\n              .filter(\r\n                option =>\r\n                  option.entryId === entry.id &&\r\n                  option.checked &&\r\n                  option.suggestion.length === 0\r\n              )\r\n              .forEach(option => {\r\n                if (\r\n                  (option.field === \"booktitle\" ||\r\n                    option.field === \"journal\") &&\r\n                  result[\"container-title\"] != null &&\r\n                  result[\"container-title\"].length > 0\r\n                ) {\r\n                  this.addSuggestion(entry.id, option.field, [\r\n                    result[\"container-title\"][0]\r\n                  ]);\r\n                }\r\n                if (option.field === \"year\" && result.created != null) {\r\n                  this.addSuggestion(entry.id, \"year\", [\r\n                    result.created[\"date-parts\"][0][0]\r\n                  ]);\r\n                }\r\n                if (\r\n                  option.field === \"author\" &&\r\n                  result.author != null &&\r\n                  result.author.length > 0\r\n                ) {\r\n                  const authors = result.author.map(\r\n                    author => `${author.family}, ${author.given}`\r\n                  );\r\n                  this.addSuggestion(entry.id, \"author\", authors);\r\n                }\r\n              });\r\n          } else {\r\n            console.log(\"title is not the same\");\r\n          }\r\n        })\r\n      );\r\n  };\r\n\r\n  addSuggestion = (id, attributeName, attributeValues) => {\r\n    attributeValues.forEach(attributeValue => {\r\n      this.setState(prevState => {\r\n        const newOptions = prevState.missingFieldsOptions.map(option => {\r\n          if (option.entryId === id && option.field === attributeName) {\r\n            const newOption = Object.assign({}, option);\r\n            newOption.suggestion.push(attributeValue);\r\n            return newOption;\r\n          } else return option;\r\n        });\r\n        return { missingFieldsOptions: newOptions };\r\n      });\r\n    });\r\n  };\r\n\r\n  addMissingField = () => {\r\n    this.state.missingFieldsOptions\r\n      .filter(option => option.checked && option.suggestion.length > 0)\r\n      .forEach(option => {\r\n        this.setState(\r\n          prevState => {\r\n            const changedEntries = prevState.entries.map(entry => {\r\n              if (\r\n                entry.id === option.entryId &&\r\n                entry[option.field.toUpperCase()] == null\r\n              ) {\r\n                const attributeName = option.field.toUpperCase();\r\n                if (option.field === \"author\") {\r\n                  const newAttribute = {\r\n                    AUTHOR: option.suggestion,\r\n                    abbreviated: false,\r\n                    changedAbbreviation: false,\r\n                    misspelling: false,\r\n                    changedMisspelling: false\r\n                  };\r\n                  const changedEntry = Object.assign(entry, newAttribute);\r\n                  changedEntry.missingRequiredFields = changedEntry.missingRequiredFields.filter(\r\n                    field => field !== \"author\"\r\n                  );\r\n                  changedEntry.correctedRequiredFields.push(\"author\");\r\n                  return changedEntry;\r\n                } else {\r\n                  const changedEntry = Object.assign(entry, {\r\n                    [attributeName]: option.suggestion[0]\r\n                  });\r\n                  changedEntry.missingRequiredFields = changedEntry.missingRequiredFields.filter(\r\n                    field => field !== option.field\r\n                  );\r\n                  changedEntry.correctedRequiredFields.push(option.field);\r\n                  return changedEntry;\r\n                }\r\n              } else return entry;\r\n            });\r\n            return { entries: changedEntries };\r\n          },\r\n          () => {\r\n            BibtexAPI.update({\r\n              entries: this.state.entries\r\n            });\r\n          }\r\n        );\r\n      });\r\n    this.removCheckOptions();\r\n  };\r\n\r\n  removCheckOptions = () => {\r\n    this.setState(prevState => {\r\n      const changedOptions = prevState.missingFieldsOptions.map(option => {\r\n        if (option.checked) {\r\n          const changedOption = Object.assign({}, option);\r\n          changedOption.checked = false;\r\n          return changedOption;\r\n        } else return option;\r\n      });\r\n      return { missingFieldsOptions: changedOptions };\r\n    });\r\n  };\r\n\r\n  selectAllMissingFieldsOptions = checked => {\r\n    this.setState(prevState => {\r\n      const changedOptions = prevState.missingFieldsOptions.map(option => {\r\n        const changedOption = Object.assign({}, option);\r\n        changedOption.checked = checked;\r\n        return changedOption;\r\n      });\r\n      return { missingFieldsOptions: changedOptions };\r\n    });\r\n  };\r\n\r\n  searchFieldSuggestion = title =>\r\n    BibtexAPI.searchMissingField(title.replace(/[\\s]+/g, \"+\")).then(result => {\r\n      if (\r\n        result != null &&\r\n        result.message != null &&\r\n        result.message.items.length > 0 &&\r\n        result.message.items[0] != null\r\n      ) {\r\n        return result.message.items[0];\r\n      } else return null;\r\n    });\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <a className=\"App-link\" href=\"app\">\r\n            cleanBibteX\r\n          </a>\r\n        </header>\r\n        <AppStart setBibtex={this.onSetBibtexText} />\r\n        <AnalyzeErrors\r\n          entries={this.state.entries}\r\n          capitalizationOptions={this.state.capitalizationOptions}\r\n          changeOption={this.changeOptionsCheckboxes}\r\n          changeAllOptions={this.changeAllOptions}\r\n          changeSelectedCapitalization={this.changeSelectedCapitalization}\r\n          getEntriesFromServer={this.getEntriesFromServer}\r\n          changeAuthorName={this.changeAuthorName}\r\n          changeAuthorSuggestion={this.changeAuthorSuggestion}\r\n          authorNameOptions={this.state.authorNameOptions}\r\n          changeAuthorNameOption={this.changeAuthorNameOption}\r\n          changeAllAuthorNameOptions={this.changeAllAuthorNameOptions}\r\n          missingFieldsOptions={this.state.missingFieldsOptions}\r\n          changeMissingFieldsOption={this.changeMissingFieldsOption}\r\n          changeFieldSuggestion={this.changeFieldSuggestion}\r\n          addMissingField={this.addMissingField}\r\n          selectAllMissingFieldsOptions={this.selectAllMissingFieldsOptions}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n//import * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n//serviceWorker.unregister();\r\n"],"sourceRoot":""}