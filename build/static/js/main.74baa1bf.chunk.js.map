{"version":3,"sources":["FileUpload.js","AppStart.js","utils/BibtexAPI.js","icons/Error.js","icons/Exito.js","Tab.js","Tabs.js","CapitalizationCheck.js","MandatoryFieldsCheck.js","AuthorNameCheck.js","AnalzyeErrors.js","utils/getNotRequiredFields.js","App.js","index.js"],"names":["readFileAsText","file","Promise","resolve","reader","FileReader","onload","event","target","result","readAsText","FileUpload","props","className","htmlFor","id","type","onChange","files","then","text","length","setBibtex","AppStart","onChangeText","setState","textInput","checkIfBibtex","state","includes","console","log","isBibtex","placeholder","value","this","bibtexText","Component","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","get","fetch","res","json","update","body","method","JSON","stringify","create","searchAuthor","title","author","searchMissingField","SvgError","viewBox","cx","cy","r","fill","stroke","strokeWidth","strokeLinecap","strokeMiterlimit","d","SvgExito","strokeLinejoin","Tab","onClick","label","activeTab","status","width","height","Error","Tabs","onClickTab","tab","children","map","child","key","CapitalizationCheck","correctedElements","allSelected","handleSaveSelection","options","selectAll","newAllSelectedState","changeAllOptions","handleChangeOption","optionToChange","optionsCheckboxes","find","option","checked","changeOption","changeSelected","capitalizationType","some","changeSelectedCapitalization","getCaseSum","caseSum","titleCaseSum","sentenceCaseSum","noCaseSum","entries","forEach","entry","capitalization","disabled","name","TITLE","correctionTitleCase","correctionSentenceCase","MandatoryFieldsCheck","changeAllMandatoryFieldCheck","getMissingFieldEntriesSum","filter","missingRequiredFields","searchMandatoryFieldSuggestion","mandatoryFieldsCheck","removeNotMandatoryFields","addMissingFields","Object","keys","mandatoryFieldsSuggestions","toggleMandatorFieldCheck","toUpperCase","index","authorArray","field","AUTHOR","checkedSearched","AuthorNameCheck","getInconsistentAuthorEntries","abbreviated","misspelling","changedAbbreviation","changedMisspelling","getInconsistentAuthorEntriesCount","searchSuggestions","changeAuthorSuggestion","authorNameOptions","changeAllAuthorNameOptions","checkCorrectedAuthors","entryId","entryAuthor","searchSuggestionFile","changeAuthorName","changeAuthorNameOption","suggestion","AnalyzeErrors","downloadBibtex","bibtexContent","bibtex","element","document","createElement","Blob","href","URL","createObjectURL","download","appendChild","click","capitalizationOptions","getEntriesFromServer","changeMandatoryFieldCheck","getNotRequiredFields","entryType","entryKeys","requiredFields","App","setInitialAuthorNameOptions","flatMap","sort","author1","author2","BibtexAPI","stateServer","loadDataFromServer","getSelectedEntries","prevState","changedEntry","assign","initialCapitalization","correctionInitialCase","allSelectedAuthorNameOptions","newOption","changeOptionsCheckboxes","concat","onSetBibtexText","newEntry","newEntryAuthor","newAuthor","searchAuthorSuggestion","foundAuthorSuggestion","changedAuthors","changedAuthor","unshift","changedEntries","changedFoundAuthor","lastSuggestion","replace","message","items","foundAuthor","itemAuthor","startsWith","family","given","searchFieldSuggestion","toLowerCase","missingField","missingFieldUpperCase","created","YEAR","authors","suggestedFieldsKeys","changedMissingRequiredFields","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.74baa1bf.chunk.js","sourcesContent":["import React from \"react\";\n\nconst readFileAsText = file =>\n  new Promise(resolve => {\n    const reader = new FileReader();\n    reader.onload = event => {\n      resolve(event.target.result);\n    };\n    reader.readAsText(file);\n  });\n\nfunction FileUpload(props) {\n  const handleFileChange = event => {\n    const file = event.target.files[0];\n    if (file) {\n      readFileAsText(file).then(text => {\n        if (text.length > 3) {\n          props.setBibtex(text);\n        }\n      });\n    }\n  };\n\n  return (\n    <div className=\"start-upload-button\">\n      <label htmlFor=\"file\">\n        <br />\n        <br />\n        <br />\n        Upload BibTeX\n      </label>\n      <input\n        id=\"file\"\n        className=\"input-file\"\n        type=\"file\"\n        onChange={handleFileChange}\n      />\n    </div>\n  );\n}\nexport default FileUpload;\n","import React, { Component } from \"react\";\nimport FileUpload from \"./FileUpload\";\n\nclass AppStart extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isBibtex: false,\n      textInput: \"\"\n    };\n  }\n\n  onChangeText = text => {\n    this.setState({ textInput: text }, () => this.checkIfBibtex());\n  };\n\n  checkIfBibtex = () => {\n    if (\n      this.state.textInput.length > 30 &&\n      this.state.textInput.includes(\"@\")\n    ) {\n      this.props.setBibtex(this.state.textInput);\n    } else {\n      console.log(\"is not a bibtex, not sending to server\");\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"start-wrapper\">\n        <div className=\"start\">\n          <div className=\"start-inputs\">\n            <textarea\n              className=\"start-input-field\"\n              type=\"text\"\n              placeholder=\"Paste your BibTeX file here\"\n              value={this.state.bibtexText}\n              onChange={event => this.onChangeText(event.target.value)}\n            />\n            <FileUpload setBibtex={this.props.setBibtex} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\nexport default AppStart;\n","// const api = \"http://127.0.0.1:5000\";\nconst crossrefApi = 'https://api.crossref.org';\n\nlet token = localStorage.token;\n\nif (!token) {\n  token = localStorage.token = Math.random().toString(36).substr(-8)\n}\nconst headers = {\n  Accept: \"application/json\",\n  Authorization: token\n};\n\nexport const get = () =>\n  fetch(`/bibtex`, { headers })\n    .then(res => res.json());\n\nexport const update = body =>\n  fetch(`/update`, {\n  method: \"POST\",\n  headers: {\n    ...headers,\n    \"Content-Type\": \"application/json\"\n  },\n  body: JSON.stringify(body)\n}).then(res => res);\n\nexport const create = body =>\n  fetch(`/bibtex`, {\n    method: \"POST\",\n    headers: {\n      ...headers,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(body)\n  }).then(res => res.json());\n\nexport const getChangedBibtex = () =>\n  fetch(`/changedBibtex`, {headers})\n    .then(res => res.json());\n\nexport const searchAuthor = (title, author) =>\n  fetch(`${crossrefApi}/works?query.bibliographic=${title}&query.author=${author}&rows=1`)\n    .then(res => res.json());\n\nexport const searchMissingField = title =>\n  fetch(`${crossrefApi}/works?query.bibliographic=${title}&rows=1`)\n      .then(res => res.json());\n","import React from \"react\";\n\nfunction SvgError(props) {\n  return (\n    <svg viewBox=\"0 0 50 50\" {...props}>\n      <circle cx={25} cy={25} r={25} fill=\"#d75a4a\" />\n      <path\n        fill=\"none\"\n        stroke=\"#fff\"\n        strokeWidth={2}\n        strokeLinecap=\"round\"\n        strokeMiterlimit={10}\n        d=\"M16 34l9-9 9-9M16 16l9 9 9 9\"\n      />\n    </svg>\n  );\n}\n\nexport default SvgError;\n","import React from \"react\";\n\nfunction SvgExito(props) {\n  return (\n    <svg viewBox=\"0 0 50 50\" {...props}>\n      <circle cx={25} cy={25} r={25} fill=\"#25ae88\" />\n      <path\n        fill=\"none\"\n        stroke=\"#fff\"\n        strokeWidth={2}\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        strokeMiterlimit={10}\n        d=\"M38 15L22 33l-10-8\"\n      />\n    </svg>\n  );\n}\n\nexport default SvgExito;\n","import React, { Component } from \"react\";\nimport ErrorIcon from '../src/icons/Error';\nimport OKIcon from '../src/icons/Exito';\n\n// import PropTypes from 'prop-types';\n\nclass Tab extends Component {\n  onClick = () => {\n    const { label, onClick } = this.props;\n    onClick(label);\n  };\n\n  render() {\n    const {\n      onClick,\n      props: { activeTab, label, status }\n    } = this;\n\n    let className = \"tab-list-item\";\n\n    if (activeTab === label) {\n      className += \" tab-list-active\";\n    }\n\n    return (\n      <li className={className} onClick={onClick}>\n        {`${label} `}\n        {status\n        ? <OKIcon width=\"20px\" height=\"20px\" />\n        : <ErrorIcon width=\"20px\" height=\"20px\" />\n        }\n      </li>\n    );\n  }\n}\n\nexport default Tab;\n","import React, { Component } from \"react\";\nimport Tab from \"./Tab\";\n\nclass Tabs extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      activeTab: this.props.children[0].props.label,\n    };\n  }\n\n  onClickTab = tab => this.setState({ activeTab: tab });\n\n  render() {\n    const {\n      onClickTab,\n      props: { children },\n      state: { activeTab }\n    } = this;\n\n    return (\n      <div className=\"tabs\">\n        <ul className=\"tab-list\">\n          {children.map(child => {\n            const { label, status } = child.props;\n            return (\n              <Tab\n                activeTab={activeTab}\n                key={label}\n                label={label}\n                onClick={onClickTab}\n                status={status}\n              />\n            );\n          })}\n        </ul>\n        <div className=\"tab-content\">\n          {children.map(child => {\n            if (child.props.label !== activeTab) {\n              return undefined;\n            }\n            return child.props.children;\n          })}\n        </div>\n      </div>\n    );\n  }\n}\nexport default Tabs;\n","import React, { Component } from \"react\";\n\nclass CapitalizationCheck extends Component {\n  state = {\n    correctedElements: [],\n    allSelected: false\n  };\n\n  handleSaveSelection = () => {\n    console.log(this.props.options);\n  };\n\n  selectAll = () => {\n    const newAllSelectedState = !this.state.allSelected;\n    this.setState({\n      allSelected: newAllSelectedState\n    });\n    this.props.changeAllOptions(newAllSelectedState);\n  };\n\n  handleChangeOption = id => {\n    const optionToChange = this.props.optionsCheckboxes.find(\n      option => option.id === id\n    );\n    optionToChange.checked = !optionToChange.checked;\n\n    this.props.changeOption(optionToChange);\n  };\n\n  changeSelected = capitalizationType => {\n    if (\n      this.props.optionsCheckboxes.some(option => option.checked) ||\n      this.state.allSelected\n    ) {\n      this.props.changeSelectedCapitalization(capitalizationType);\n      this.setState({\n        allSelected: false\n      });\n    }\n  };\n\n  getCaseSum = () => {\n    const caseSum = {\n      titleCaseSum: 0,\n      sentenceCaseSum: 0,\n      noCaseSum: 0\n    };\n    this.props.entries.forEach(entry => {\n      if (entry.capitalization === \"titleCase\") caseSum.titleCaseSum++;\n      else if (entry.capitalization === \"sentenceCase\")\n        caseSum.sentenceCaseSum++;\n      else caseSum.noCaseSum++;\n    });\n    return caseSum;\n  };\n\n  render() {\n    const { entries, optionsCheckboxes } = this.props;\n\n    return (\n      <div>\n        <div className=\"statistic\">\n          <h3>Summary</h3>\n          <ul>\n            <li>{entries.length} Entries found</li>\n            {this.getCaseSum().titleCaseSum > 0 && (\n              <li>{this.getCaseSum().titleCaseSum} Title case entries found</li>\n            )}\n            {this.getCaseSum().sentenceCaseSum > 0 && (\n              <li>\n                {this.getCaseSum().sentenceCaseSum} Sentence case entries found\n              </li>\n            )}\n            {this.getCaseSum().noCaseSum > 0 && (\n              <li>{this.getCaseSum().noCaseSum} without known case found</li>\n            )}\n          </ul>\n        </div>\n\n        {entries.length > 0 && (\n          <div className=\"corrections-table\">\n            <button\n              className=\"btn-select-all\"\n              disabled={!optionsCheckboxes.some(option => option.checked)}\n              onClick={() => this.changeSelected(\"titleCase\")}\n            >\n              Set selected to title case\n            </button>\n            <button\n              className=\"btn-select-all\"\n              disabled={!optionsCheckboxes.some(option => option.checked)}\n              onClick={() => this.changeSelected(\"sentenceCase\")}\n            >\n              Set selected to sentence case\n            </button>\n            <button\n              className=\"btn-select-all\"\n              disabled={!optionsCheckboxes.some(option => option.checked)}\n              onClick={() => this.changeSelected(\"initialCase\")}\n            >\n              Set selected to initial case\n            </button>\n            <table>\n              <tbody>\n                <tr>\n                  <th>\n                    <input\n                      type=\"checkBox\"\n                      name=\"select-all-checkbox\"\n                      checked={this.state.allSelected}\n                      onChange={() => this.selectAll()}\n                    />\n                  </th>\n                  <th>Current</th>\n                  <th>Title case</th>\n                  <th>Sentence case</th>\n                </tr>\n              </tbody>\n              {entries.map(entry => (\n                <tbody key={entry.id}>\n                  <tr>\n                    <td\n                      className={\n                        entry.capitalization === \"titleCase\"\n                          ? \"table-entry-green\"\n                          : entry.capitalization === \"sentenceCase\"\n                          ? \"table-entry-blue\"\n                          : \"table-entry-red\"\n                      }\n                    >\n                      <center>\n                        <input\n                          id={entry.id}\n                          type=\"checkBox\"\n                          checked={\n                            optionsCheckboxes.find(\n                              option => option.id === entry.id\n                            ).checked\n                          }\n                          onChange={() => this.handleChangeOption(entry.id)}\n                        />\n                      </center>\n                    </td>\n                    <td\n                      className={\n                        entry.capitalization === \"titleCase\"\n                          ? \"table-entry-green\"\n                          : entry.capitalization === \"sentenceCase\"\n                          ? \"table-entry-blue\"\n                          : \"table-entry-red\"\n                      }\n                    >\n                      {entry.TITLE}\n                    </td>\n                    <td className=\"table-entry-green\">\n                      {entry.correctionTitleCase}\n                    </td>\n                    <td className=\"table-entry-blue\">\n                      {entry.correctionSentenceCase}\n                    </td>\n                  </tr>\n                </tbody>\n              ))}\n            </table>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\nexport default CapitalizationCheck;\n","import React, { Component } from \"react\";\n\nclass MandatoryFieldsCheck extends Component {\n  state = {\n    allSelected: false\n  };\n\n  selectAll = () => {\n    const newAllSelectedState = !this.state.allSelected;\n    this.setState({ allSelected: newAllSelectedState });\n    this.props.changeAllMandatoryFieldCheck(newAllSelectedState);\n  };\n\n  getMissingFieldEntriesSum = () =>\n    this.props.entries.filter(entry => entry.missingRequiredFields.length > 0)\n      .length;\n\n  render() {\n    return (\n      <div>\n        <div className=\"statistic\">\n          <h3>Summary</h3>\n          <ul>\n            <li>{this.props.entries.length} entries found</li>\n            {this.getMissingFieldEntriesSum() > 0 && (\n              <li>\n                {`${this.getMissingFieldEntriesSum()} entries with missing required fields found`}\n              </li>\n            )}\n          </ul>\n        </div>\n        {this.props.entries.length > 0 && (\n          <div className=\"corrections-table\">\n            <button\n              onClick={() => this.props.searchMandatoryFieldSuggestion()}\n              disabled={\n                !this.props.entries.some(entry => entry.mandatoryFieldsCheck)\n              }\n            >\n              Search missing fields online\n            </button>\n            <button\n              onClick={() => {\n                this.setState({ allSelected: false });\n                this.props.removeNotMandatoryFields();\n              }}\n              disabled={\n                !this.props.entries.some(entry => entry.mandatoryFieldsCheck)\n              }\n            >\n              Remove not mandatory fields\n            </button>\n            <button\n              disabled={\n                !this.props.entries.some(entry => entry.mandatoryFieldsCheck)\n              }\n              onClick={() => {\n                this.setState({ allSelected: false });\n                this.props.addMissingFields();\n              }}\n            >\n              Add field suggestion to entry\n            </button>\n            <table>\n              <tbody>\n                <tr>\n                  <th>\n                    <input\n                      type=\"checkBox\"\n                      name=\"select-all-missing-fields-checkbox\"\n                      checked={this.state.allSelected}\n                      onChange={() => this.selectAll()}\n                    />\n                  </th>\n                  <th>Current entry</th>\n                  <th>Suggestion for missing fields</th>\n                </tr>\n              </tbody>\n              {this.props.entries.map(entry => (\n                <tbody key={entry.id}>\n                  <tr\n                    className={\n                      entry.missingRequiredFields.length === 0\n                        ? \"table-entry-green\"\n                        : Object.keys(entry.mandatoryFieldsSuggestions).length >\n                          0\n                        ? \"table-entry-blue\"\n                        : \"table-entry-red\"\n                    }\n                  >\n                    <td>\n                      <input\n                        type=\"checkBox\"\n                        checked={entry.mandatoryFieldsCheck}\n                        onChange={() =>\n                          this.props.toggleMandatorFieldCheck(entry.id)\n                        }\n                      />\n                    </td>\n                    <td>\n                      {Object.keys(entry)\n                        .filter(key => key === key.toUpperCase())\n                        .map(key => (\n                          <div key={`${entry.id}+${key}`}>\n                            <strong>{key}: </strong>\n                            {entry[key] == null ? (\n                              \"<EMPTY>\"\n                            ) : key === \"AUTHOR\" ? (\n                              entry[key].map((author, index, authorArray) =>\n                                index === authorArray.length - 1 ? (\n                                  <span key={entry.id + author.name}>\n                                    {author.name}\n                                  </span>\n                                ) : (\n                                  <span key={entry.id + author.name}>\n                                    {author.name} and{\" \"}\n                                  </span>\n                                )\n                              )\n                            ) : (\n                              <span>{entry[key]}</span>\n                            )}\n                          </div>\n                        ))}\n                      {entry.missingRequiredFields.length > 0 && (\n                        <div className=\"mandatory-missing-fields-text\">\n                          <strong>Missing required fields: </strong>\n                          {entry.missingRequiredFields.map(field => (\n                            <span\n                              key={entry.id + field}\n                            >{`${field.toUpperCase()}, `}</span>\n                          ))}\n                        </div>\n                      )}\n                    </td>\n                    <td>\n                      {Object.keys(entry.mandatoryFieldsSuggestions).length > 0\n                        ? Object.keys(entry.mandatoryFieldsSuggestions).map(\n                            key =>\n                              key === \"AUTHOR\" ? (\n                                <div key={entry.id + key}>\n                                  <strong>{key}: </strong>\n                                  {entry.mandatoryFieldsSuggestions.AUTHOR.map(\n                                    (author, index, authorArray) => (\n                                      <span key={entry.id + author.name}>\n                                        {`${author.name} ${\n                                          index === authorArray.length - 1\n                                            ? \"\"\n                                            : \"and \"\n                                        }`}\n                                      </span>\n                                    )\n                                  )}\n                                </div>\n                              ) : (\n                                <div key={entry.id + key}>\n                                  <strong>{key}: </strong>\n                                  {entry.mandatoryFieldsSuggestions[key]}\n                                </div>\n                              )\n                          )\n                        : entry.checkedSearched ? 'not found' : '-'}\n                    </td>\n                  </tr>\n                </tbody>\n              ))}\n            </table>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\nexport default MandatoryFieldsCheck;\n","import React, { Component } from \"react\";\n\nclass AuthorNameCheck extends Component {\n  state = {\n    allSelected: false\n  };\n\n  getInconsistentAuthorEntries = () =>\n    this.props.entries.filter(\n      entry =>\n        entry.AUTHOR != null &&\n        entry.AUTHOR.some(\n          author =>\n            author.abbreviated ||\n            author.misspelling ||\n            author.changedAbbreviation ||\n            author.changedMisspelling\n        )\n    );\n\n  getInconsistentAuthorEntriesCount = () =>\n    this.props.entries.filter(\n      entry =>\n        entry.AUTHOR != null &&\n        entry.AUTHOR.some(author => author.abbreviated || author.misspelling)\n    );\n\n  searchSuggestions = () => {\n    this.props.changeAuthorSuggestion(\n      this.props.authorNameOptions.filter(option => option.checked)\n    );\n  };\n\n  selectAll = () => {\n    const newAllSelectedState = !this.state.allSelected;\n    this.setState({ allSelected: newAllSelectedState });\n    this.props.changeAllAuthorNameOptions(newAllSelectedState);\n  };\n\n  checkCorrectedAuthors = option =>\n    this.props.entries.some(\n      entry =>\n        entry.id === option.entryId &&\n        entry.AUTHOR.some(\n          entryAuthor =>\n            option.author === entryAuthor.name &&\n            !entryAuthor.abbreviated &&\n            !entryAuthor.misspelling\n        )\n    );\n\n  render() {\n    return (\n      <div>\n        <div className=\"statistic\">\n          <h3>Summary</h3>\n          <ul>\n            <li>{this.props.entries.length} entries found</li>\n            <li>\n              {this.getInconsistentAuthorEntriesCount().length} entries with\n              inconsistent author names found\n            </li>\n          </ul>\n        </div>\n        {this.getInconsistentAuthorEntries().length > 0 && (\n          <div className=\"corrections-table\">\n            <div>\n            <button\n              onClick={() =>\n                this.setState({ allSelected: false }, this.searchSuggestions())\n              }\n              disabled={\n                !this.props.authorNameOptions.some(option => option.checked)\n              }\n            >\n              Search suggestion online\n            </button>\n            <button\n              onClick={() =>\n                this.setState(\n                  { allSelected: false },\n                  this.props.searchSuggestionFile()\n                )\n              }\n              disabled={\n                !this.props.authorNameOptions.some(option => option.checked)\n              }\n            >\n              Search suggestion in file\n            </button>\n            <button\n              onClick={() =>\n                this.setState(\n                  { allSelected: false },\n                  this.props.changeAuthorName()\n                )\n              }\n              disabled={\n                !this.props.authorNameOptions.some(option => option.checked)\n              }\n            >\n              Change author name to suggestion\n            </button>\n            </div>\n            <table>\n              <tbody>\n                <tr>\n                  <th>\n                    <input\n                      type=\"checkBox\"\n                      name=\"select-all-author-name-checkbox\"\n                      checked={this.state.allSelected}\n                      onChange={() => this.selectAll()}\n                    />\n                  </th>\n                  <th>Current Author Name</th>\n                  <th>Author Name Suggestion</th>\n                  <th>Entry Title</th>\n                </tr>\n              </tbody>\n              {this.props.authorNameOptions.map(author => (\n                <tbody key={`${author.entryId}+${author.author}`}>\n                  <tr>\n                    <td\n                      className={\n                        this.checkCorrectedAuthors(author)\n                          ? \"table-entry-green\"\n                          : \"table-entry-red\"\n                      }\n                    >\n                      <center>\n                        <input\n                          type=\"checkBox\"\n                          checked={author.checked}\n                          onChange={() =>\n                            this.props.changeAuthorNameOption(author)\n                          }\n                        />\n                      </center>\n                    </td>\n                    <td\n                      className={\n                        this.checkCorrectedAuthors(author)\n                          ? \"table-entry-green\"\n                          : \"table-entry-red\"\n                      }\n                    >\n                      {author.author}\n                    </td>\n                    <td\n                      className={\n                        this.checkCorrectedAuthors(author)\n                          ? \"table-entry-green\"\n                          : author.suggestion.length > 0\n                          ? \"table-entry-blue\"\n                          : \"table-entry-red\"\n                      }\n                    >\n                      {author.suggestion != null && author.suggestion.length > 0\n                        ? author.suggestion[0]\n                        : \"no suggestion found\"}\n                    </td>\n                    <td className=\"table-entry-grey\">{author.title}</td>\n                  </tr>\n                </tbody>\n              ))}\n            </table>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\nexport default AuthorNameCheck;\n","import React, { Component } from \"react\";\nimport Tabs from \"./Tabs\";\nimport CapitalizationCheck from \"./CapitalizationCheck\";\nimport MandatoryFieldsCheck from \"./MandatoryFieldsCheck\";\nimport AuthorNameCheck from \"./AuthorNameCheck\";\nimport * as BibtexAPI from \"./utils/BibtexAPI\";\n\nclass AnalyzeErrors extends Component {\n  downloadBibtex = bibtexContent => {\n    console.log(bibtexContent);\n    if (bibtexContent != null && bibtexContent.bibtex != null) {\n      const element = document.createElement(\"a\");\n      const file = new Blob([bibtexContent.bibtex], {\n        type: \"text/plain\"\n      });\n      element.href = URL.createObjectURL(file);\n      element.download = \"changedBibTeX.bib\";\n      document.body.appendChild(element); // Required for this to work in FireFox\n      element.click();\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"start-wrapper\">\n        <div className=\"start\">\n          <div>\n            <Tabs>\n              <div\n                label=\"Capitalization\"\n                status={\n                  !this.props.entries.some(\n                    entry => entry.capitalization === \"caseNotFound\"\n                  )\n                }\n              >\n                <CapitalizationCheck\n                  entries={this.props.entries}\n                  optionsCheckboxes={this.props.capitalizationOptions}\n                  changeOption={this.props.changeOption}\n                  changeAllOptions={this.props.changeAllOptions}\n                  changeSelectedCapitalization={\n                    this.props.changeSelectedCapitalization\n                  }\n                />\n              </div>\n              <div\n                label=\"Author name\"\n                status={\n                  this.props.entries.filter(\n                    entry =>\n                      entry.AUTHOR != null &&\n                      entry.AUTHOR.some(\n                        author => author.abbreviated || author.misspelling\n                      )\n                  ).length === 0\n                }\n              >\n                <AuthorNameCheck\n                  entries={this.props.entries}\n                  getEntriesFromServer={this.props.getEntriesFromServer}\n                  changeAuthorName={this.props.changeAuthorName}\n                  changeAuthorSuggestion={this.props.changeAuthorSuggestion}\n                  authorNameOptions={this.props.authorNameOptions}\n                  changeAuthorNameOption={this.props.changeAuthorNameOption}\n                  changeAllAuthorNameOptions={\n                    this.props.changeAllAuthorNameOptions\n                  }\n                  searchSuggestionFile={this.props.searchSuggestionFile}\n                />\n              </div>\n              <div\n                label=\"Mandatory fields\"\n                status={\n                  !this.props.entries.some(\n                    entry => entry.missingRequiredFields.length > 0\n                  )\n                }\n              >\n                <MandatoryFieldsCheck\n                  entries={this.props.entries}\n                  changeMandatoryFieldCheck={\n                    this.props.changeMandatoryFieldCheck\n                  }\n                  toggleMandatorFieldCheck={this.props.toggleMandatorFieldCheck}\n                  searchMandatoryFieldSuggestion={\n                    this.props.searchMandatoryFieldSuggestion\n                  }\n                  changeAllMandatoryFieldCheck={\n                    this.props.changeAllMandatoryFieldCheck\n                  }\n                  addMissingFields={this.props.addMissingFields}\n                  removeNotMandatoryFields={this.props.removeNotMandatoryFields}\n                />\n              </div>\n            </Tabs>\n          </div>\n          <div className=\"download-button-container\">\n            <button\n              className=\"download-button\"\n              disabled={\n                this.props.entries == null || this.props.entries.length <= 0\n              }\n              onClick={() =>\n                BibtexAPI.getChangedBibtex().then(result =>\n                  this.downloadBibtex(result)\n                )\n              }\n            >\n              Download changes as BibTeX\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\nexport default AnalyzeErrors;\n","const getNotRequiredFields = (entryType, entryKeys) => {\n  let requiredFields = [ 'TITLE', 'AUTHOR', 'URL' ];\n  \n  if (entryType === 'ARTICLE') requiredFields = [ 'TITLE', 'AUTHOR', 'JOURNAL', 'YEAR' ];\n  if (entryType === 'BOOK') requiredFields = [ 'TITLE', 'AUTHOR', 'PUBLISHER', 'YEAR' ];\n  if (entryType === 'BOOKLET') requiredFields = [ 'TITLE' ];\n  if (entryType === 'INBOOK') requiredFields = [ 'TITLE', 'AUTHOR', 'PUBLISHER', 'YEAR', 'CHAPTER' ];\n  if (entryType === 'INCOLLECTION') requiredFields = [ 'TITLE', 'AUTHOR', 'PUBLISHER', 'YEAR', 'BOOKTITLE' ];\n  if (entryType === 'INPROCEEDINGS') requiredFields = [ 'TITLE', 'AUTHOR', 'YEAR', 'BOOKTITLE' ];\n  if (entryType === 'MANUAL') requiredFields = [ 'TITLE' ];\n  if (entryType === 'MASTERTHESIS') requiredFields = [ 'TITLE', 'AUTHOR', 'SCHOOL', 'YEAR' ];\n  if (entryType === 'PHDTHESIS') requiredFields = [ 'TITLE', 'AUTHOR', 'SCHOOL', 'YEAR' ];\n  if (entryType === 'PROCEEDINGS') requiredFields = [ 'TITLE', 'YEAR' ];\n  if (entryType === 'TECHREPORT') requiredFields = [ 'TITLE', 'AUTHOR', 'JOURNAL', 'YEAR' ];\n  if (entryType === 'UNPUBLISHED') requiredFields = [ 'TITLE', 'AUTHOR', 'NOTE' ];\n\n  const nonRequiredFields = entryKeys.filter(key => !requiredFields.includes(key))\n  return nonRequiredFields;\n};\nexport default getNotRequiredFields;","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport AppStart from \"./AppStart\";\nimport * as BibtexAPI from \"./utils/BibtexAPI\";\nimport AnalyzeErrors from \"./AnalzyeErrors\";\nimport getNotRequiredFields from \"./utils/getNotRequiredFields\";\n\nclass App extends Component {\n  state = {\n    bibtexText: \"\",\n    entries: [],\n    capitalizationOptions: [],\n    authorNameOptions: []\n  };\n\n  componentDidMount() {\n    this.setState(\n      prevState => ({\n        capitalizationOptions: prevState.entries.map(entry => ({\n          id: entry.id,\n          checked: false\n        })),\n        authorNameOptions: this.setInitialAuthorNameOptions(prevState.entries)\n      }),\n      this.getEntriesFromServer()\n    );\n  }\n\n  setInitialAuthorNameOptions = entries => {\n    return entries\n      .filter(\n        entry =>\n          entry.AUTHOR != null &&\n          entry.AUTHOR.some(\n            author =>\n              author.abbreviated ||\n              author.misspelling ||\n              author.changedAbbreviation ||\n              author.changedMisspelling\n          )\n      )\n      .flatMap(entry =>\n        entry.AUTHOR.filter(\n          author =>\n            author.abbreviated ||\n            author.misspelling ||\n            author.changedAbbreviation ||\n            author.changedMisspelling\n        ).map(author => ({\n          entryId: entry.id,\n          title: entry.TITLE,\n          author: author.name,\n          suggestion: author.suggestion,\n          checked: false\n        }))\n      )\n      .sort((author1, author2) => {\n        if (author1.author < author2.author) return -1;\n        if (author1.author > author2.author) return 1;\n        return 0;\n      });\n  };\n\n  getEntriesFromServer = () => {\n    BibtexAPI.get().then(stateServer => {\n      this.loadDataFromServer(stateServer);\n    });\n  };\n\n  getSelectedEntries = () =>\n    this.state.entries.filter(entry =>\n      this.state.capitalizationOptions.find(\n        option => option.id === entry.id && option.checked\n      )\n    );\n\n  changeSelectedCapitalization = capitalizationType => {\n    this.setState(\n      prevState => {\n        const newEntries = prevState.entries.map(entry => {\n          if (\n            prevState.capitalizationOptions.some(\n              option => option.id === entry.id && option.checked\n            )\n          ) {\n            const changedEntry = Object.assign({}, entry);\n            if (capitalizationType === \"initialCase\") {\n              changedEntry.capitalization = changedEntry.initialCapitalization;\n              changedEntry.TITLE = changedEntry.correctionInitialCase;\n            } else if (capitalizationType === \"titleCase\") {\n              changedEntry.capitalization = \"titleCase\";\n              changedEntry.TITLE = changedEntry.correctionTitleCase;\n            } else if (capitalizationType === \"sentenceCase\") {\n              changedEntry.capitalization = \"sentenceCase\";\n              changedEntry.TITLE = changedEntry.correctionSentenceCase;\n            }\n            return changedEntry;\n          } else {\n            return Object.assign({}, entry);\n          }\n        });\n        return { entries: newEntries };\n      },\n      () => {\n        BibtexAPI.update({\n          entries: this.state.entries\n        });\n      }\n    );\n    this.changeAllOptions(false);\n  };\n\n  changeAllOptions = allSelected =>\n    this.setState(prevState => ({\n      capitalizationOptions: prevState.capitalizationOptions.map(option => {\n        option.checked = allSelected;\n        return option;\n      })\n    }));\n\n  changeAllAuthorNameOptions = allSelectedAuthorNameOptions =>\n    this.setState(prevState => ({\n      authorNameOptions: prevState.authorNameOptions.map(option => {\n        option.checked = allSelectedAuthorNameOptions;\n        return option;\n      })\n    }));\n\n  changeAuthorNameOption = author => {\n    this.setState(prevState => {\n      const newOptions = prevState.authorNameOptions.map(option => {\n        if (\n          option.author === author.author &&\n          option.entryId === author.entryId\n        ) {\n          const newOption = Object.assign({}, option);\n          newOption.checked = !option.checked;\n          return newOption;\n        } else {\n          return option;\n        }\n      });\n      return { authorNameOptions: newOptions };\n    });\n  };\n\n  changeOptionsCheckboxes = optionToChange =>\n    this.setState(prevState => ({\n      capitalizationOptions: prevState.capitalizationOptions\n        .filter(option => option.id !== optionToChange.id)\n        .concat([optionToChange])\n    }));\n\n  loadDataFromServer = stateServer =>\n    this.setState({\n      entries: stateServer.entries,\n      capitalizationOptions: stateServer.entries.map(entry => ({\n        id: entry.id,\n        checked: false\n      })),\n      authorNameOptions: this.setInitialAuthorNameOptions(stateServer.entries)\n    });\n\n  onSetBibtexText = textInput => {\n    const textInputObject = { bibtexText: textInput };\n    BibtexAPI.create(textInputObject).then(() =>\n      BibtexAPI.get().then(stateServer => this.loadDataFromServer(stateServer))\n    );\n  };\n\n  changeAuthorName = () => {\n    this.setState(\n      prevState => {\n        const newEnries = prevState.entries.map(entry => {\n          if (\n            entry.AUTHOR != null &&\n            this.state.authorNameOptions.some(\n              option => option.entryId === entry.id && option.checked\n            )\n          ) {\n            const newEntry = Object.assign({}, entry);\n            const newEntryAuthor = newEntry.AUTHOR.map(author => {\n              const authorOption = this.state.authorNameOptions.find(\n                option =>\n                  option.author === author.name &&\n                  option.checked &&\n                  option.entryId === entry.id\n              );\n              if (\n                authorOption != null &&\n                author.suggestion != null &&\n                author.suggestion.length > 0 &&\n                (author.abbreviated || author.misspelling)\n              ) {\n                const newAuthor = Object.assign({}, author);\n                newAuthor.name = newAuthor.suggestion[0];\n                if (author.abbreviated) {\n                  newAuthor.abbreviated = false;\n                  newAuthor.changedAbbreviation = true;\n                }\n                if (author.misspelling) {\n                  newAuthor.misspelling = false;\n                  newAuthor.changedMisspelling = true;\n                }\n                return newAuthor;\n              } else return author;\n            });\n            newEntry.AUTHOR = newEntryAuthor;\n            return newEntry;\n          } else {\n            return entry;\n          }\n        });\n        return { entries: newEnries };\n      },\n      () => {\n        this.setState(\n          prevState => ({\n            authorNameOptions: this.setInitialAuthorNameOptions(\n              prevState.entries\n            )\n          }),\n          () => {\n            BibtexAPI.update({\n              entries: this.state.entries\n            });\n          }\n        );\n      }\n    );\n  };\n\n  changeAuthorSuggestion = options => {\n    options.forEach(option => {\n      this.searchAuthorSuggestion(option.title, option.author).then(\n        foundAuthorSuggestion => {\n          if (foundAuthorSuggestion != null) {\n            this.setState(\n              prevState => {\n                const changedEntries = prevState.entries.map(entry => {\n                  if (entry.id === option.entryId) {\n                    const changedAuthors = entry.AUTHOR.map(author => {\n                      if (\n                        author.name === option.author &&\n                        !author.suggestion.includes(foundAuthorSuggestion)\n                      ) {\n                        const changedAuthor = Object.assign({}, author);\n                        changedAuthor.suggestion.unshift(foundAuthorSuggestion);\n                        return changedAuthor;\n                      } else return author;\n                    });\n                    entry.AUTHOR = changedAuthors;\n                    return entry;\n                  } else return entry;\n                });\n                return { entries: changedEntries };\n              },\n              () => {\n                BibtexAPI.update({\n                  entries: this.state.entries\n                });\n              }\n            );\n          }\n        }\n      );\n    });\n    this.setState(prevState => ({\n      authorNameOptions: this.setInitialAuthorNameOptions(prevState.entries)\n    }));\n  };\n\n  searchSuggestionFile = () => {\n    const changedEntries = [...this.state.entries];\n    this.state.authorNameOptions\n      .filter(option => option.checked && option.suggestion.length > 1)\n      .forEach(option => {\n        const changedEntry = {\n          ...changedEntries.find(entry => entry.id === option.entryId)\n        };\n        const changedAuthors = [...changedEntry.AUTHOR];\n        const changedFoundAuthor = {\n          ...changedAuthors.find(author => author.name === option.author)\n        };\n        const lastSuggestion =\n          changedFoundAuthor.suggestion[\n            changedFoundAuthor.suggestion.length - 1\n          ];\n        changedFoundAuthor.suggestion = [];\n        changedFoundAuthor.suggestion.unshift(lastSuggestion);\n        changedAuthors[changedFoundAuthor.id] = changedFoundAuthor;\n        changedEntry.AUTHOR = changedAuthors;\n        changedEntries[changedEntry.id] = changedEntry;\n      });\n    this.setState({ entries: changedEntries }, () => {\n      BibtexAPI.update({\n        entries: this.state.entries\n      });\n      this.setState(prevState => ({\n        authorNameOptions: this.setInitialAuthorNameOptions(prevState.entries)\n      }));\n    });\n  };\n\n  searchAuthorSuggestion = (title, author) => {\n    return BibtexAPI.searchAuthor(\n      title.replace(/[\\s]+/g, \"+\"),\n      author.replace(/[\\s]+/g, \"+\")\n    ).then(result => {\n      if (\n        result != null &&\n        result.message != null &&\n        result.message.items.length > 0 &&\n        result.message.items[0].author != null\n      ) {\n        const foundAuthor = result.message.items[0].author.find(itemAuthor =>\n          author.startsWith(itemAuthor.family)\n        );\n        if (foundAuthor != null) {\n          return `${foundAuthor.family}, ${foundAuthor.given}`;\n        } else return null;\n      } else return null;\n    });\n  };\n\n  searchFieldSuggestion = title =>\n    BibtexAPI.searchMissingField(title.replace(/[\\s]+/g, \"+\")).then(result => {\n      if (\n        result != null &&\n        result.message != null &&\n        result.message.items.length > 0 &&\n        result.message.items[0] != null\n      ) {\n        return result.message.items[0];\n      } else return null;\n    });\n\n  changeAllMandatoryFieldCheck = checked => {\n    const changedEntries = [...this.state.entries];\n    changedEntries.forEach((entry, index) => {\n      changedEntries[index] = { ...entry, mandatoryFieldsCheck: checked };\n    });\n    this.setState({ entries: changedEntries }, () =>\n      BibtexAPI.update({\n        entries: this.state.entries\n      })\n    );\n  };\n\n  toggleMandatorFieldCheck = id =>\n    this.changeMandatoryFieldCheck(\n      id,\n      !this.state.entries[id].mandatoryFieldsCheck\n    );\n\n  changeMandatoryFieldCheck = (id, checked) => {\n    const changedEntries = [...this.state.entries];\n    const changedEntry = {\n      ...changedEntries[id],\n      mandatoryFieldsCheck: checked\n    };\n    changedEntries[id] = changedEntry;\n    this.setState({ entries: changedEntries });\n  };\n\n  searchMandatoryFieldSuggestion = () => {\n    const changedEntries = [...this.state.entries];\n    changedEntries\n      .filter(\n        entry =>\n          entry.mandatoryFieldsCheck && entry.missingRequiredFields.length > 0\n      )\n      .forEach(entry => {\n        const changedEntry = { ...changedEntries[entry.id] };\n        changedEntry.checkedSearched = true;\n        this.searchFieldSuggestion(changedEntry.TITLE).then(result => {\n          if (\n            result.title.length > 0 &&\n            result.title[0].toLowerCase().startsWith(entry.TITLE.toLowerCase()[0])\n          ) {\n            const changedMissingFields = [...entry.missingRequiredFields];\n            changedMissingFields.forEach(missingField => {\n              const missingFieldUpperCase = missingField.toUpperCase();\n              if (\n                (missingFieldUpperCase === \"BOOKTITLE\" ||\n                  missingFieldUpperCase === \"JOURNAL\") &&\n                result[\"container-title\"] != null &&\n                result[\"container-title\"].length > 0\n              ) {\n                changedEntry.mandatoryFieldsSuggestions[missingFieldUpperCase] =\n                  result[\"container-title\"][0];\n                changedEntries[entry.id] = changedEntry;\n                this.setState({ entries: changedEntries }, () =>\n                  BibtexAPI.update({\n                    entries: this.state.entries\n                  })\n                );\n              } else {\n                changedEntries[entry.id] = changedEntry;\n                this.setState({ entries: changedEntries }, () =>\n                  BibtexAPI.update({\n                    entries: this.state.entries\n                  })\n                );\n              }\n              if (missingFieldUpperCase === \"YEAR\" && result.created != null) {\n                changedEntry.mandatoryFieldsSuggestions.YEAR =\n                  result.created[\"date-parts\"][0][0];\n                changedEntries[entry.id] = changedEntry;\n                this.setState({ entries: changedEntries }, () =>\n                  BibtexAPI.update({\n                    entries: this.state.entries\n                  })\n                );\n              } else {\n                changedEntries[entry.id] = changedEntry;\n                this.setState({ entries: changedEntries }, () =>\n                  BibtexAPI.update({\n                    entries: this.state.entries\n                  })\n                );\n              }\n              if (\n                missingFieldUpperCase === \"AUTHOR\" &&\n                result.author != null &&\n                result.author.length > 0\n              ) {\n                const authors = result.author.map(author => ({\n                  name: `${author.family}, ${author.given}`,\n                  abbreviated: false,\n                  changedAbbreviation: false,\n                  misspelling: false,\n                  changedMisspelling: false,\n                  suggestion: []\n                }));\n                changedEntry.mandatoryFieldsSuggestions.AUTHOR = authors;\n                changedEntries[entry.id] = changedEntry;\n                this.setState({ entries: changedEntries }, () =>\n                  BibtexAPI.update({\n                    entries: this.state.entries\n                  })\n                );\n              } else {\n                changedEntries[entry.id] = changedEntry;\n                this.setState({ entries: changedEntries }, () =>\n                  BibtexAPI.update({\n                    entries: this.state.entries\n                  })\n                );\n              }\n            });\n          } else {\n            changedEntries[entry.id] = changedEntry;\n            this.setState({ entries: changedEntries }, () =>\n              BibtexAPI.update({\n                entries: this.state.entries\n              })\n            );\n          }\n        });\n      });\n  };\n\n  addMissingFields = () => {\n    const changedEntries = [...this.state.entries];\n    changedEntries\n      .filter(\n        entry =>\n          entry.mandatoryFieldsCheck &&\n          entry.missingRequiredFields.length > 0 &&\n          Object.keys(entry.mandatoryFieldsSuggestions).length > 0\n      )\n      .forEach(entry => {\n        const changedEntry = { ...entry, ...entry.mandatoryFieldsSuggestions };\n        const suggestedFieldsKeys = Object.keys(\n          changedEntry.mandatoryFieldsSuggestions\n        );\n        let changedMissingRequiredFields = [\n          ...changedEntry.missingRequiredFields\n        ];\n        suggestedFieldsKeys.forEach(field => {\n          changedMissingRequiredFields = changedMissingRequiredFields.filter(\n            missingField => missingField !== field.toLowerCase()\n          );\n        });\n        changedEntry.missingRequiredFields = changedMissingRequiredFields;\n        changedEntries[entry.id] = changedEntry;\n      });\n    this.setState({ entries: changedEntries }, () =>\n      this.changeAllMandatoryFieldCheck(false)\n    );\n  };\n\n  removeNotMandatoryFields = () => {\n    const changedEntries = [...this.state.entries];\n    changedEntries\n      .filter(entry => entry.mandatoryFieldsCheck)\n      .forEach(entry => {\n        const changedEntry = { ...entry };\n        const entryKeys = Object.keys(changedEntry).filter(\n          keys => keys === keys.toUpperCase()\n        );\n        const notRequiredFields = getNotRequiredFields(\n          changedEntry.entryType,\n          entryKeys\n        );\n        notRequiredFields.forEach(field => {\n          delete changedEntry[field];\n        });\n        changedEntries[entry.id] = changedEntry;\n      });\n    this.setState({ entries: changedEntries }, () =>\n      this.changeAllMandatoryFieldCheck(false)\n    );\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <div className=\"App-header-text\">\n            cleanBibTeX\n          </div>\n        </header>\n        <AppStart setBibtex={this.onSetBibtexText} />\n        <AnalyzeErrors\n          entries={this.state.entries}\n          capitalizationOptions={this.state.capitalizationOptions}\n          changeOption={this.changeOptionsCheckboxes}\n          changeAllOptions={this.changeAllOptions}\n          changeSelectedCapitalization={this.changeSelectedCapitalization}\n          getEntriesFromServer={this.getEntriesFromServer}\n          changeAuthorName={this.changeAuthorName}\n          changeAuthorSuggestion={this.changeAuthorSuggestion}\n          authorNameOptions={this.state.authorNameOptions}\n          changeAuthorNameOption={this.changeAuthorNameOption}\n          changeAllAuthorNameOptions={this.changeAllAuthorNameOptions}\n          changeMandatoryFieldCheck={this.changeMandatoryFieldCheck}\n          toggleMandatorFieldCheck={this.toggleMandatorFieldCheck}\n          searchMandatoryFieldSuggestion={this.searchMandatoryFieldSuggestion}\n          changeAllMandatoryFieldCheck={this.changeAllMandatoryFieldCheck}\n          addMissingFields={this.addMissingFields}\n          removeNotMandatoryFields={this.removeNotMandatoryFields}\n          searchSuggestionFile={this.searchSuggestionFile}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n//import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//serviceWorker.unregister();\n"],"sourceRoot":""}