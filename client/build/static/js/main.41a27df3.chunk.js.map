{"version":3,"sources":["FileUpload.js","AppStart.js","utils/BibtexAPI.js","Tab.js","Tabs.js","CapitalizationCheck.js","MandatoryFieldsCheck.js","AuthorNameCheck.js","AnalzyeErrors.js","App.js","index.js"],"names":["readFileAsText","file","Promise","resolve","reader","FileReader","onload","event","target","result","readAsText","FileUpload","props","className","htmlFor","id","type","onChange","files","then","text","length","setBibtex","AppStart","onChangeText","setState","textInput","checkIfBibtex","state","includes","console","log","isBibtex","placeholder","value","this","bibtexText","Component","token","localStorage","headers","Accept","Authorization","get","fetch","res","json","update","body","method","JSON","stringify","create","searchAuthor","title","author","searchMissingField","Tab","onClick","label","activeTab","status","Tabs","onClickTab","tab","children","map","child","key","CapitalizationCheck","showAdvancedSettings","correctedElements","allSelected","handleButton","prevState","handleSaveSelection","options","selectAll","newAllSelectedState","changeAllOptions","handleChangeOption","optionToChange","optionsCheckboxes","find","option","checked","changeOption","changeSelected","capitalizationType","some","changeSelectedCapitalization","getCaseSum","caseSum","titleCaseSum","sentenceCaseSum","noCaseSum","entries","forEach","entry","capitalization","name","TITLE","correctionTitleCase","correctionSentenceCase","MandatoryFieldsCheck","getMissingFieldsEntries","filter","missingRequiredFields","getCorrectedAttributeEntry","entryId","field","toUpperCase","getCorrectedAttributeField","attribute","selectAllMissingFieldsOptions","getTableClassName","suggestion","changeFieldSuggestion","addMissingField","missingFieldsOptions","changeMissingFieldsOption","suggestionField","AuthorNameCheck","getInconsistentAuthorEntries","AUTHOR","abbreviated","misspelling","changedAbbreviation","changedMisspelling","getInconsistentAuthorEntriesCount","searchSuggestions","changeAuthorSuggestion","authorNameOptions","changeAllAuthorNameOptions","checkCorrectedAuthors","entryAuthor","changeAuthorName","changeAuthorNameOption","AnalyzeErrors","capitalizationOptions","getEntriesFromServer","App","setInitialAuthorNameOptions","flatMap","sort","author1","author2","setInitialMissingFieldsOptions","correctedRequiredFields","concat","missingField","BibtexAPI","stateServer","loadDataFromServer","getSelectedEntries","changedEntry","Object","assign","initialCapitalization","correctionInitialCase","allSelectedAuthorNameOptions","newOption","changeOptionsCheckboxes","missingFieldsOption","changedOption","onSetBibtexText","newEntry","newEntryAuthor","newAuthor","searchAuthorSuggestion","foundAuthorSuggestion","changedAuthors","changedAuthor","unshift","replace","message","items","foundAuthor","itemAuthor","startsWith","family","given","searchFieldSuggestion","toLowerCase","addSuggestion","created","authors","attributeName","attributeValues","attributeValue","push","newAttribute","removCheckOptions","href","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.41a27df3.chunk.js","sourcesContent":["import React from \"react\";\n\nconst readFileAsText = file =>\n  new Promise(resolve => {\n    const reader = new FileReader();\n    reader.onload = event => {\n      resolve(event.target.result);\n    };\n    reader.readAsText(file);\n  });\n\nfunction FileUpload(props) {\n  const handleFileChange = event => {\n    const file = event.target.files[0];\n    if (file) {\n      readFileAsText(file).then(text => {\n        if (text.length > 3) {\n          // console.log(text);\n          props.setBibtex(text);\n        }\n      });\n    }\n  };\n\n  return (\n    <div className=\"start-upload-button\">\n      <label htmlFor=\"file\">\n        <br />\n        <br />\n        <br />\n        Upload BibteX\n      </label>\n      <input\n        id=\"file\"\n        className=\"input-file\"\n        type=\"file\"\n        onChange={handleFileChange}\n      />\n    </div>\n  );\n}\nexport default FileUpload;\n","import React, { Component } from \"react\";\nimport FileUpload from \"./FileUpload\";\n\nclass AppStart extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isBibtex: false,\n      textInput: \"\"\n    };\n  }\n\n  onChangeText = text => {\n    this.setState({ textInput: text }, () => this.checkIfBibtex());\n  };\n\n  checkIfBibtex = () => {\n    if (\n      this.state.textInput.length > 30 &&\n      this.state.textInput.includes(\"@\")\n    ) {\n      console.log(\"is probably bibtex, will send to server\");\n      this.props.setBibtex(this.state.textInput);\n    } else {\n      console.log(\"is not a bibtex, not sending to server\");\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"start-wrapper\">\n        <div className=\"start\">\n          <div className=\"start-inputs\">\n            <textarea\n              className=\"start-input-field\"\n              type=\"text\"\n              placeholder=\"Paste your BibTeX file here\"\n              value={this.state.bibtexText}\n              onChange={event => this.onChangeText(event.target.value)}\n            />\n            <FileUpload setBibtex={this.props.setBibtex} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\nexport default AppStart;\n","// const api = \"http://127.0.0.1:5000\";\nconst crossrefApi = 'https://api.crossref.org';\n\nlet token = localStorage.token;\n\nif (!token) {\n  token = localStorage.token = 123;\n}\nconst headers = {\n  Accept: \"application/json\",\n  Authorization: token\n};\n\nexport const get = () =>\n  fetch(`/api/bibtex`, { headers })\n    .then(res => res.json());\n\nexport const update = body =>\n  fetch(`/api/update`, {\n  method: \"POST\",\n  headers: {\n    ...headers,\n    \"Content-Type\": \"application/json\"\n  },\n  body: JSON.stringify(body)\n}).then(res => res);\n\nexport const create = body =>\n  fetch(`/api/bibtex`, {\n    method: \"POST\",\n    headers: {\n      ...headers,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(body)\n  }).then(res => res.json());\n\nexport const searchAuthor = (title, author) =>\n  fetch(`${crossrefApi}/works?query.bibliographic=${title}&query.author=${author}&rows=1`)\n    .then(res => res.json());\n\nexport const searchMissingField = title =>\n  fetch(`${crossrefApi}/works?query.bibliographic=${title}&rows=1`)\n      .then(res => res.json());\n","import React, { Component } from \"react\";\n\n// import PropTypes from 'prop-types';\n\nclass Tab extends Component {\n  onClick = () => {\n    const { label, onClick } = this.props;\n    onClick(label);\n  };\n\n  render() {\n    const {\n      onClick,\n      props: { activeTab, label, status }\n    } = this;\n\n    let className = \"tab-list-item\";\n\n    if (activeTab === label) {\n      className += \" tab-list-active\";\n    }\n\n    return (\n      <li className={className} onClick={onClick}>\n        {`${label} - ${status ? 'ok' : 'inconsistencies found'}`}\n      </li>\n    );\n  }\n}\n\nexport default Tab;\n","import React, { Component } from \"react\";\nimport Tab from \"./Tab\";\n\nclass Tabs extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      activeTab: this.props.children[0].props.label,\n    };\n  }\n\n  onClickTab = tab => this.setState({ activeTab: tab });\n\n  render() {\n    const {\n      onClickTab,\n      props: { children },\n      state: { activeTab }\n    } = this;\n\n    return (\n      <div className=\"tabs\">\n        <ol className=\"tab-list\">\n          {children.map(child => {\n            const { label, status } = child.props;\n            return (\n              <Tab\n                activeTab={activeTab}\n                key={label}\n                label={label}\n                onClick={onClickTab}\n                status={status}\n              />\n            );\n          })}\n        </ol>\n        <div className=\"tab-content\">\n          {children.map(child => {\n            if (child.props.label !== activeTab) {\n              return undefined;\n            }\n            return child.props.children;\n          })}\n        </div>\n      </div>\n    );\n  }\n}\nexport default Tabs;\n","import React, { Component } from \"react\";\n\nclass CapitalizationCheck extends Component {\n  state = {\n    showAdvancedSettings: false,\n    correctedElements: [],\n    allSelected: false\n  };\n\n  handleButton = () => {\n    this.setState(prevState => ({\n      showAdvancedSettings: !prevState.showAdvancedSettings\n    }));\n  };\n\n  handleSaveSelection = () => {\n    console.log(this.props.options);\n  };\n\n  selectAll = () => {\n    const newAllSelectedState = !this.state.allSelected;\n    this.setState({\n      allSelected: newAllSelectedState\n    });\n    this.props.changeAllOptions(newAllSelectedState);\n  };\n\n  handleChangeOption = id => {\n    const optionToChange = this.props.optionsCheckboxes.find(\n      option => option.id === id\n    );\n    optionToChange.checked = !optionToChange.checked;\n\n    this.props.changeOption(optionToChange);\n  };\n\n  changeSelected = capitalizationType => {\n    if (\n      this.props.optionsCheckboxes.some(option => option.checked) ||\n      this.state.allSelected\n    ) {\n      this.props.changeSelectedCapitalization(capitalizationType);\n      this.setState({\n        allSelected: false\n      });\n    }\n  };\n\n  getCaseSum = () => {\n    const caseSum = {\n      titleCaseSum: 0,\n      sentenceCaseSum: 0,\n      noCaseSum: 0\n    };\n    this.props.entries.forEach(entry => {\n      if (entry.capitalization === \"titleCase\") caseSum.titleCaseSum++;\n      else if (entry.capitalization === \"sentenceCase\")\n        caseSum.sentenceCaseSum++;\n      else caseSum.noCaseSum++;\n    });\n    return caseSum;\n  };\n\n  render() {\n    const { entries, optionsCheckboxes } = this.props;\n\n    return (\n      <div>\n        <div className=\"statistic\">\n          <h3>Summary</h3>\n          <ul>\n            <li>{entries.length} Entries found</li>\n            {this.getCaseSum().titleCaseSum > 0 && (\n              <li>{this.getCaseSum().titleCaseSum} Title case entries found</li>\n            )}\n            {this.getCaseSum().sentenceCaseSum > 0 && (\n              <li>\n                {this.getCaseSum().sentenceCaseSum} Sentence case entries found\n              </li>\n            )}\n            {this.getCaseSum().noCaseSum > 0 && (\n              <li>{this.getCaseSum().noCaseSum} without known case found</li>\n            )}\n          </ul>\n\n          <button\n            className=\"btn-toggle-advanced\"\n            onClick={event => this.handleButton(event)}\n          >\n            Correct errors\n          </button>\n        </div>\n\n        {this.state.showAdvancedSettings && entries.length > 0 && (\n          <div className=\"corrections-table\">\n            <button\n              className=\"btn-select-all\"\n              onClick={() => this.changeSelected(\"titleCase\")}\n            >\n              Set selected to title case\n            </button>\n            <button\n              className=\"btn-select-all\"\n              onClick={() => this.changeSelected(\"sentenceCase\")}\n            >\n              Set selected to sentence case\n            </button>\n            <button\n              className=\"btn-select-all\"\n              onClick={() => this.changeSelected(\"initialCase\")}\n            >\n              Set selected to initial case\n            </button>\n            <table>\n              <tbody>\n                <tr>\n                  <th>\n                    <input\n                      type=\"checkBox\"\n                      name=\"select-all-checkbox\"\n                      checked={this.state.allSelected}\n                      onChange={() => this.selectAll()}\n                    />\n                    Current\n                  </th>\n                  <th>Title case</th>\n                  <th>Sentence case</th>\n                </tr>\n              </tbody>\n              {entries.map(entry => (\n                <tbody key={entry.id}>\n                  <tr>\n                    <td\n                      className={\n                        entry.capitalization === \"titleCase\"\n                          ? \"table-entry-green\"\n                          : entry.capitalization === \"sentenceCase\"\n                          ? \"table-entry-blue\"\n                          : \"table-entry-red\"\n                      }\n                    >\n                      <input\n                        id={entry.id}\n                        type=\"checkBox\"\n                        checked={\n                          optionsCheckboxes.find(\n                            option => option.id === entry.id\n                          ).checked\n                        }\n                        onChange={() => this.handleChangeOption(entry.id)}\n                      />\n                      {entry.TITLE}\n                    </td>\n                    <td className=\"table-entry-green\">\n                      {entry.correctionTitleCase}\n                    </td>\n                    <td className=\"table-entry-blue\">\n                      {entry.correctionSentenceCase}\n                    </td>\n                  </tr>\n                </tbody>\n              ))}\n            </table>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\nexport default CapitalizationCheck;\n","import React, { Component } from \"react\";\n\nclass MandatoryFieldsCheck extends Component {\n  state = {\n    allSelected: false\n  };\n\n  getMissingFieldsEntries = () =>\n    this.props.entries.filter(entry => entry.missingRequiredFields.length > 0)\n      .length;\n\n  getCorrectedAttributeEntry = option =>\n    this.props.entries\n      .filter(entry => entry.id === option.entryId)\n      .find(entry => entry[option.field.toUpperCase()]);\n\n  getCorrectedAttributeField = option => {\n    const entry = this.getCorrectedAttributeEntry(option);\n    if (entry != null) {\n      const field = entry[option.field.toUpperCase()];\n      if (option.field === \"author\" && field.length > 0) {\n        return field.map(attribute => <div key={attribute}>{attribute}</div>);\n      } else {\n        return field;\n      }\n    } else {\n      return \"-\";\n    }\n  };\n\n  selectAll = () => {\n    const newAllSelectedState = !this.state.allSelected;\n    this.setState(prevState => ({\n      allSelected: newAllSelectedState\n    }));\n    this.props.selectAllMissingFieldsOptions(newAllSelectedState);\n  };\n\n  getTableClassName = option =>\n    this.getCorrectedAttributeEntry(option) != null\n      ? \"table-entry-green\"\n      : option.suggestion.length > 0\n      ? \"table-entry-blue\"\n      : \"table-entry-red\";\n\n  render() {\n    return (\n      <div>\n        <div className=\"statistic\">\n          <h3>Summary</h3>\n          <ul>\n            <li>{this.props.entries.length} entries found</li>\n            <li>\n              {this.getMissingFieldsEntries()} entries with missing required\n              fields found\n            </li>\n          </ul>\n        </div>\n        {this.getMissingFieldsEntries() > 0 && (\n          <div className=\"corrections-table\">\n            <button onClick={() => this.props.changeFieldSuggestion()}>\n              Search suggestion online\n            </button>\n            <button\n              onClick={() => {\n                this.setState({ allSelected: false });\n                this.props.addMissingField();\n              }}\n            >\n              Add suggestion to field\n            </button>\n            <table>\n              <tbody>\n                <tr>\n                  <th>\n                    <input\n                      type=\"checkBox\"\n                      name=\"select-all-missing-fields-checkbox\"\n                      checked={this.state.allSelected}\n                      onChange={() => this.selectAll()}\n                    />\n                    Missing field name\n                  </th>\n                  <th>Added field</th>\n                  <th>Suggestion</th>\n                  <th>Title</th>\n                </tr>\n              </tbody>\n              {this.props.missingFieldsOptions.map(option => (\n                <tbody key={`${option.entryId}+${option.field}`}>\n                  <tr>\n                    <td className={this.getTableClassName(option)}>\n                      <input\n                        type=\"checkbox\"\n                        checked={option.checked}\n                        onChange={() =>\n                          this.props.changeMissingFieldsOption(option)\n                        }\n                      />\n                      <span>{option.field}</span>\n                    </td>\n                    <td className={this.getTableClassName(option)}>\n                      {this.getCorrectedAttributeField(option)}\n                    </td>\n                    <td className={this.getTableClassName(option)}>\n                      {option.suggestion.length > 0\n                        ? option.suggestion.map(suggestionField => (\n                            <div key={suggestionField}>{suggestionField}</div>\n                          ))\n                        : \"-\"}\n                    </td>\n                    <td className={this.getTableClassName(option)}>\n                      {\n                        this.props.entries.find(\n                          entry => entry.id === option.entryId\n                        ).TITLE\n                      }\n                    </td>\n                  </tr>\n                </tbody>\n              ))}\n            </table>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\nexport default MandatoryFieldsCheck;\n","import React, { Component } from \"react\";\n\nclass AuthorNameCheck extends Component {\n  state = {\n    allSelected: false\n  };\n\n  getInconsistentAuthorEntries = () =>\n    this.props.entries.filter(\n      entry =>\n        entry.AUTHOR != null &&\n        entry.AUTHOR.some(\n          author =>\n            author.abbreviated ||\n            author.misspelling ||\n            author.changedAbbreviation ||\n            author.changedMisspelling\n        )\n    );\n\n  getInconsistentAuthorEntriesCount = () =>\n    this.props.entries.filter(\n      entry =>\n        entry.AUTHOR != null &&\n        entry.AUTHOR.some(author => author.abbreviated || author.misspelling)\n    );\n\n  searchSuggestions = () => {\n    this.props.changeAuthorSuggestion(\n      this.props.authorNameOptions.filter(option => option.checked)\n    );\n  };\n\n  selectAll = () => {\n    const newAllSelectedState = !this.state.allSelected;\n    this.setState({ allSelected: newAllSelectedState });\n    this.props.changeAllAuthorNameOptions(newAllSelectedState);\n  };\n\n  checkCorrectedAuthors = option =>\n    this.props.entries.some(\n      entry =>\n        entry.id === option.entryId &&\n        entry.AUTHOR.some(\n          entryAuthor =>\n            option.author === entryAuthor.name &&\n            !entryAuthor.abbreviated &&\n            !entryAuthor.misspelling\n        )\n    );\n\n  render() {\n    return (\n      <div>\n        <div className=\"statistic\">\n          <h3>Summary</h3>\n          <ul>\n            <li>{this.props.entries.length} entries found</li>\n            <li>\n              {this.getInconsistentAuthorEntriesCount().length} entries with\n              inconsistent author names found\n            </li>\n          </ul>\n        </div>\n        {this.getInconsistentAuthorEntries().length > 0 && (\n          <div className=\"corrections-table\">\n            <button\n              onClick={() =>\n                this.setState({ allSelected: false }, this.searchSuggestions())\n              }\n            >\n              Search author suggestion\n            </button>\n            <button\n              onClick={() =>\n                this.setState(\n                  { allSelected: false },\n                  this.props.changeAuthorName()\n                )\n              }\n            >\n              change author name to suggestion\n            </button>\n            <button onClick={() => console.log(this.props.authorNameOptions)}>\n              show options\n            </button>\n            <button onClick={() => console.log(this.props.entries)}>\n              show Entries\n            </button>\n            <table>\n              <tbody>\n                <tr>\n                  <th>\n                    <input\n                      type=\"checkBox\"\n                      name=\"select-all-author-name-checkbox\"\n                      checked={this.state.allSelected}\n                      onChange={() => this.selectAll()}\n                    />\n                    Current Author Name\n                  </th>\n                  <th>Author Name Suggestion</th>\n                  <th>Entry Title</th>\n                </tr>\n              </tbody>\n              {this.props.authorNameOptions.map(author => (\n                <tbody key={`${author.entryId}+${author.author}`}>\n                  <tr>\n                    <td\n                      className={\n                        this.checkCorrectedAuthors(author)\n                          ? \"table-entry-green\"\n                          : \"table-entry-red\"\n                      }\n                    >\n                      <input\n                        type=\"checkBox\"\n                        checked={author.checked}\n                        onChange={() =>\n                          this.props.changeAuthorNameOption(author)\n                        }\n                      />\n                      {author.author}\n                    </td>\n                    <td\n                      className={\n                        this.checkCorrectedAuthors(author)\n                          ? \"table-entry-green\"\n                          : author.suggestion.length > 0\n                          ? \"table-entry-blue\"\n                          : \"table-entry-red\"\n                      }\n                    >\n                      {author.suggestion != null && author.suggestion.length > 0\n                        ? author.suggestion[0]\n                        : \"no suggestion found\"}\n                    </td>\n                    <td className=\"table-entry-grey\">{author.title}</td>\n                  </tr>\n                </tbody>\n              ))}\n            </table>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\nexport default AuthorNameCheck;\n","import React, { Component } from \"react\";\nimport Tabs from \"./Tabs\";\nimport CapitalizationCheck from \"./CapitalizationCheck\";\nimport MandatoryFieldsCheck from \"./MandatoryFieldsCheck\";\nimport AuthorNameCheck from \"./AuthorNameCheck\";\n\nclass AnalyzeErrors extends Component {\n  render() {\n    return (\n      <div className=\"start-wrapper\">\n        <div className=\"start\">\n          <div>\n            <Tabs>\n              <div\n                label=\"Capitalization\"\n                status={\n                  !this.props.entries.some(\n                    entry => entry.capitalization === \"caseNotFound\"\n                  )\n                }\n              >\n                <CapitalizationCheck\n                  entries={this.props.entries}\n                  optionsCheckboxes={this.props.capitalizationOptions}\n                  changeOption={this.props.changeOption}\n                  changeAllOptions={this.props.changeAllOptions}\n                  changeSelectedCapitalization={\n                    this.props.changeSelectedCapitalization\n                  }\n                />\n              </div>\n              <div\n                label=\"Author name\"\n                status={\n                  this.props.entries.filter(\n                    entry =>\n                      entry.AUTHOR != null &&\n                      entry.AUTHOR.some(\n                        author => author.abbreviated || author.misspelling\n                      )\n                  ).length === 0\n                }\n              >\n                <AuthorNameCheck \n                entries={this.props.entries}\n                getEntriesFromServer={this.props.getEntriesFromServer}\n                changeAuthorName={this.props.changeAuthorName}\n                changeAuthorSuggestion={this.props.changeAuthorSuggestion}\n                authorNameOptions={this.props.authorNameOptions}\n                changeAuthorNameOption={this.props.changeAuthorNameOption}\n                changeAllAuthorNameOptions={this.props.changeAllAuthorNameOptions}\n                />\n              </div>\n              <div\n                label=\"Mandatory fields\"\n                status={\n                  !this.props.entries.some(\n                    entry => entry.missingRequiredFields.length > 0\n                  )\n                }\n              >\n                <MandatoryFieldsCheck\n                entries={this.props.entries}\n                missingFieldsOptions={this.props.missingFieldsOptions}\n                changeMissingFieldsOption={this.props.changeMissingFieldsOption}\n                changeFieldSuggestion={this.props.changeFieldSuggestion}\n                addMissingField={this.props.addMissingField}\n                selectAllMissingFieldsOptions={this.props.selectAllMissingFieldsOptions}\n                />\n              </div>\n            </Tabs>\n          </div>\n          <button className=\"download-button\">Download BibTeX</button>\n        </div>\n      </div>\n    );\n  }\n}\nexport default AnalyzeErrors;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport AppStart from \"./AppStart\";\nimport * as BibtexAPI from \"./utils/BibtexAPI\";\nimport AnalyzeErrors from \"./AnalzyeErrors\";\n\nclass App extends Component {\n  state = {\n    bibtexText: \"\",\n    entries: [],\n    capitalizationOptions: [],\n    authorNameOptions: [],\n    missingFieldsOptions: []\n  };\n\n  componentDidMount() {\n    this.setState(\n      prevState => ({\n        capitalizationOptions: prevState.entries.map(entry => ({\n          id: entry.id,\n          checked: false\n        })),\n        authorNameOptions: this.setInitialAuthorNameOptions(prevState.entries),\n        missingFieldsOptions: this.setInitialMissingFieldsOptions(\n          prevState.entries\n        )\n      }),\n      this.getEntriesFromServer()\n    );\n  }\n\n  setInitialAuthorNameOptions = entries =>\n    entries\n      .filter(\n        entry =>\n          entry.AUTHOR != null &&\n          entry.AUTHOR.some(\n            author =>\n              author.abbreviated ||\n              author.misspelling ||\n              author.changedAbbreviation ||\n              author.changedMisspelling\n          )\n      )\n      .flatMap(entry =>\n        entry.AUTHOR.filter(\n          author =>\n            author.abbreviated ||\n            author.misspelling ||\n            author.changedAbbreviation ||\n            author.changedMisspelling\n        ).map(author => ({\n          entryId: entry.id,\n          title: entry.TITLE,\n          author: author.name,\n          suggestion: author.suggestion,\n          checked: false\n        }))\n      )\n      .sort((author1, author2) => {\n        if (author1.author < author2.author) return -1;\n        if (author1.author > author2.author) return 1;\n        return 0;\n      });\n\n  setInitialMissingFieldsOptions = entries =>\n    entries\n      .filter(\n        entry =>\n          entry.missingRequiredFields.length > 0 ||\n          entry.correctedRequiredFields.length > 0\n      )\n      .flatMap(entry =>\n        entry.missingRequiredFields\n          .concat(entry.correctedRequiredFields)\n          .map(missingField => ({\n            entryId: entry.id,\n            title: entry.TITLE,\n            field: missingField,\n            suggestion: [],\n            checked: false\n          }))\n      );\n\n  getEntriesFromServer = () => {\n    BibtexAPI.get().then(stateServer => {\n      this.loadDataFromServer(stateServer);\n    });\n  };\n\n  getSelectedEntries = () =>\n    this.state.entries.filter(entry =>\n      this.state.capitalizationOptions.find(\n        option => option.id === entry.id && option.checked\n      )\n    );\n\n  changeSelectedCapitalization = capitalizationType => {\n    this.setState(\n      prevState => {\n        const newEntries = prevState.entries.map(entry => {\n          if (\n            prevState.capitalizationOptions.some(\n              option => option.id === entry.id && option.checked\n            )\n          ) {\n            const changedEntry = Object.assign({}, entry);\n            if (capitalizationType === \"initialCase\") {\n              changedEntry.capitalization = changedEntry.initialCapitalization;\n              changedEntry.TITLE = changedEntry.correctionInitialCase;\n            } else if (capitalizationType === \"titleCase\") {\n              changedEntry.capitalization = \"titleCase\";\n              changedEntry.TITLE = changedEntry.correctionTitleCase;\n            } else if (capitalizationType === \"sentenceCase\") {\n              changedEntry.capitalization = \"sentenceCase\";\n              changedEntry.TITLE = changedEntry.correctionSentenceCase;\n            }\n            return changedEntry;\n          } else {\n            return Object.assign({}, entry);\n          }\n        });\n        return { entries: newEntries };\n      },\n      () => {\n        BibtexAPI.update({\n          entries: this.state.entries\n        });\n      }\n    );\n    this.changeAllOptions(false);\n  };\n\n  changeAllOptions = allSelected =>\n    this.setState(prevState => ({\n      capitalizationOptions: prevState.capitalizationOptions.map(option => {\n        option.checked = allSelected;\n        return option;\n      })\n    }));\n\n  changeAllAuthorNameOptions = allSelectedAuthorNameOptions =>\n    this.setState(prevState => ({\n      authorNameOptions: prevState.authorNameOptions.map(option => {\n        option.checked = allSelectedAuthorNameOptions;\n        return option;\n      })\n    }));\n\n  changeAuthorNameOption = author => {\n    this.setState(prevState => {\n      const newOptions = prevState.authorNameOptions.map(option => {\n        if (\n          option.author === author.author &&\n          option.entryId === author.entryId\n        ) {\n          const newOption = Object.assign({}, option);\n          newOption.checked = !option.checked;\n          return newOption;\n        } else {\n          return option;\n        }\n      });\n      return { authorNameOptions: newOptions };\n    });\n  };\n\n  changeOptionsCheckboxes = optionToChange =>\n    this.setState(prevState => ({\n      capitalizationOptions: prevState.capitalizationOptions\n        .filter(option => option.id !== optionToChange.id)\n        .concat([optionToChange])\n    }));\n\n  changeMissingFieldsOption = missingFieldsOption => {\n    this.setState(prevState => {\n      const changedOptions = prevState.missingFieldsOptions.map(option => {\n        if (\n          option.entryId === missingFieldsOption.entryId &&\n          option.field === missingFieldsOption.field\n        ) {\n          const changedOption = Object.assign({}, missingFieldsOption);\n          changedOption.checked = !changedOption.checked;\n          return changedOption;\n        } else return option;\n      });\n      return { missingFieldsOptions: changedOptions };\n    });\n  };\n\n  loadDataFromServer = stateServer =>\n    this.setState({\n      entries: stateServer.entries,\n      capitalizationOptions: stateServer.entries.map(entry => ({\n        id: entry.id,\n        checked: false\n      })),\n      authorNameOptions: this.setInitialAuthorNameOptions(stateServer.entries),\n      missingFieldsOptions: this.setInitialMissingFieldsOptions(\n        stateServer.entries\n      )\n    });\n\n  onSetBibtexText = textInput => {\n    const textInputObject = { bibtexText: textInput };\n    BibtexAPI.create(textInputObject).then(() =>\n      BibtexAPI.get().then(stateServer => this.loadDataFromServer(stateServer))\n    );\n  };\n\n  changeAuthorName = () => {\n    this.setState(\n      prevState => {\n        const newEnries = prevState.entries.map(entry => {\n          if (\n            entry.AUTHOR != null &&\n            this.state.authorNameOptions.some(\n              option => option.entryId === entry.id && option.checked\n            )\n          ) {\n            const newEntry = Object.assign({}, entry);\n            const newEntryAuthor = newEntry.AUTHOR.map(author => {\n              const authorOption = this.state.authorNameOptions.find(\n                option =>\n                  option.author === author.name &&\n                  option.checked &&\n                  option.entryId === entry.id\n              );\n              if (\n                authorOption != null &&\n                author.suggestion != null &&\n                author.suggestion.length > 0 &&\n                (author.abbreviated || author.misspelling)\n              ) {\n                const newAuthor = Object.assign({}, author);\n                newAuthor.name = newAuthor.suggestion[0];\n                if (author.abbreviated) {\n                  newAuthor.abbreviated = false;\n                  newAuthor.changedAbbreviation = true;\n                }\n                if (author.misspelling) {\n                  newAuthor.misspelling = false;\n                  newAuthor.changedMisspelling = true;\n                }\n                return newAuthor;\n              } else return author;\n            });\n            newEntry.AUTHOR = newEntryAuthor;\n            return newEntry;\n          } else {\n            return entry;\n          }\n        });\n        return { entries: newEnries };\n      },\n      () => {\n        this.setState(\n          prevState => ({\n            authorNameOptions: this.setInitialAuthorNameOptions(\n              prevState.entries\n            )\n          }),\n          () => {\n            BibtexAPI.update({\n              entries: this.state.entries\n            });\n          }\n        );\n      }\n    );\n  };\n\n  changeAuthorSuggestion = options => {\n    options.forEach(option => {\n      this.searchAuthorSuggestion(option.title, option.author).then(\n        foundAuthorSuggestion => {\n          console.log(foundAuthorSuggestion);\n          if (foundAuthorSuggestion != null) {\n            this.setState(\n              prevState => {\n                const changedEntries = prevState.entries.map(entry => {\n                  if (entry.id === option.entryId) {\n                    const changedAuthors = entry.AUTHOR.map(author => {\n                      if (author.name === option.author) {\n                        const changedAuthor = Object.assign({}, author);\n                        changedAuthor.suggestion.unshift(foundAuthorSuggestion);\n                        console.log(changedAuthor);\n                        return changedAuthor;\n                      } else return author;\n                    });\n                    entry.AUTHOR = changedAuthors;\n                    return entry;\n                  } else return entry;\n                });\n                return { entries: changedEntries };\n              },\n              () => {\n                BibtexAPI.update({\n                  entries: this.state.entries\n                });\n              }\n            );\n          }\n        }\n      );\n    });\n    this.setState(prevState => ({\n      authorNameOptions: this.setInitialAuthorNameOptions(prevState.entries)\n    }));\n  };\n\n  searchAuthorSuggestion = (title, author) => {\n    return BibtexAPI.searchAuthor(\n      title.replace(/[\\s]+/g, \"+\"),\n      author.replace(/[\\s]+/g, \"+\")\n    ).then(result => {\n      if (\n        result != null &&\n        result.message != null &&\n        result.message.items.length > 0 &&\n        result.message.items[0].author != null\n      ) {\n        const foundAuthor = result.message.items[0].author.find(itemAuthor =>\n          author.startsWith(itemAuthor.family)\n        );\n        if (foundAuthor != null) {\n          // console.log(foundAuthor);\n          return `${foundAuthor.family}, ${foundAuthor.given}`;\n        } else return null;\n      } else return null;\n    });\n  };\n\n  changeFieldSuggestion = () => {\n    this.state.entries\n      .filter(entry =>\n        this.state.missingFieldsOptions.some(\n          option => option.entryId === entry.id && option.checked\n        )\n      )\n      .forEach(entry =>\n        this.searchFieldSuggestion(entry.TITLE).then(result => {\n          if (\n            result.title.length > 0 &&\n            result.title[0].toLowerCase().startsWith(entry.TITLE.toLowerCase())\n          ) {\n            console.log(\"title is the same\");\n            this.state.missingFieldsOptions\n              .filter(\n                option =>\n                  option.entryId === entry.id &&\n                  option.checked &&\n                  option.suggestion.length === 0\n              )\n              .forEach(option => {\n                if (\n                  (option.field === \"booktitle\" ||\n                    option.field === \"journal\") &&\n                  result[\"container-title\"] != null &&\n                  result[\"container-title\"].length > 0\n                ) {\n                  this.addSuggestion(entry.id, option.field, [\n                    result[\"container-title\"][0]\n                  ]);\n                }\n                if (option.field === \"year\" && result.created != null) {\n                  this.addSuggestion(entry.id, \"year\", [\n                    result.created[\"date-parts\"][0][0]\n                  ]);\n                }\n                if (\n                  option.field === \"author\" &&\n                  result.author != null &&\n                  result.author.length > 0\n                ) {\n                  const authors = result.author.map(\n                    author => `${author.family}, ${author.given}`\n                  );\n                  this.addSuggestion(entry.id, \"author\", authors);\n                }\n              });\n          } else {\n            console.log(\"title is not the same\");\n          }\n        })\n      );\n  };\n\n  addSuggestion = (id, attributeName, attributeValues) => {\n    attributeValues.forEach(attributeValue => {\n      this.setState(prevState => {\n        const newOptions = prevState.missingFieldsOptions.map(option => {\n          if (option.entryId === id && option.field === attributeName) {\n            const newOption = Object.assign({}, option);\n            newOption.suggestion.push(attributeValue);\n            return newOption;\n          } else return option;\n        });\n        return { missingFieldsOptions: newOptions };\n      });\n    });\n  };\n\n  addMissingField = () => {\n    this.state.missingFieldsOptions\n      .filter(option => option.checked && option.suggestion.length > 0)\n      .forEach(option => {\n        this.setState(\n          prevState => {\n            const changedEntries = prevState.entries.map(entry => {\n              if (\n                entry.id === option.entryId &&\n                entry[option.field.toUpperCase()] == null\n              ) {\n                const attributeName = option.field.toUpperCase();\n                if (option.field === \"author\") {\n                  const newAttribute = {\n                    AUTHOR: option.suggestion,\n                    abbreviated: false,\n                    changedAbbreviation: false,\n                    misspelling: false,\n                    changedMisspelling: false\n                  };\n                  const changedEntry = Object.assign(entry, newAttribute);\n                  changedEntry.missingRequiredFields = changedEntry.missingRequiredFields.filter(\n                    field => field !== \"author\"\n                  );\n                  changedEntry.correctedRequiredFields.push(\"author\");\n                  return changedEntry;\n                } else {\n                  const changedEntry = Object.assign(entry, {\n                    [attributeName]: option.suggestion[0]\n                  });\n                  changedEntry.missingRequiredFields = changedEntry.missingRequiredFields.filter(\n                    field => field !== option.field\n                  );\n                  changedEntry.correctedRequiredFields.push(option.field);\n                  return changedEntry;\n                }\n              } else return entry;\n            });\n            return { entries: changedEntries };\n          },\n          () => {\n            BibtexAPI.update({\n              entries: this.state.entries\n            });\n          }\n        );\n      });\n    this.removCheckOptions();\n  };\n\n  removCheckOptions = () => {\n    this.setState(prevState => {\n      const changedOptions = prevState.missingFieldsOptions.map(option => {\n        if (option.checked) {\n          const changedOption = Object.assign({}, option);\n          changedOption.checked = false;\n          return changedOption;\n        } else return option;\n      });\n      return { missingFieldsOptions: changedOptions };\n    });\n  };\n\n  selectAllMissingFieldsOptions = checked => {\n    this.setState(prevState => {\n      const changedOptions = prevState.missingFieldsOptions.map(option => {\n        const changedOption = Object.assign({}, option);\n        changedOption.checked = checked;\n        return changedOption;\n      });\n      return { missingFieldsOptions: changedOptions };\n    });\n  };\n\n  searchFieldSuggestion = title =>\n    BibtexAPI.searchMissingField(title.replace(/[\\s]+/g, \"+\")).then(result => {\n      if (\n        result != null &&\n        result.message != null &&\n        result.message.items.length > 0 &&\n        result.message.items[0] != null\n      ) {\n        return result.message.items[0];\n      } else return null;\n    });\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <a className=\"App-link\" href=\"app\">\n            cleanBibteX\n          </a>\n        </header>\n        <AppStart setBibtex={this.onSetBibtexText} />\n        <AnalyzeErrors\n          entries={this.state.entries}\n          capitalizationOptions={this.state.capitalizationOptions}\n          changeOption={this.changeOptionsCheckboxes}\n          changeAllOptions={this.changeAllOptions}\n          changeSelectedCapitalization={this.changeSelectedCapitalization}\n          getEntriesFromServer={this.getEntriesFromServer}\n          changeAuthorName={this.changeAuthorName}\n          changeAuthorSuggestion={this.changeAuthorSuggestion}\n          authorNameOptions={this.state.authorNameOptions}\n          changeAuthorNameOption={this.changeAuthorNameOption}\n          changeAllAuthorNameOptions={this.changeAllAuthorNameOptions}\n          missingFieldsOptions={this.state.missingFieldsOptions}\n          changeMissingFieldsOption={this.changeMissingFieldsOption}\n          changeFieldSuggestion={this.changeFieldSuggestion}\n          addMissingField={this.addMissingField}\n          selectAllMissingFieldsOptions={this.selectAllMissingFieldsOptions}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n//import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//serviceWorker.unregister();\n"],"sourceRoot":""}